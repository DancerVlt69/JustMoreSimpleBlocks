Index: src/main/resources/assets/slabsnstairs/models/block/diorite_button_inventory.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/diorite_button_inventory.json b/src/main/resources/assets/slabsnstairs/models/block/diorite_button_inventory.json
new file mode 100644
--- /dev/null	(date 1656871944459)
+++ b/src/main/resources/assets/slabsnstairs/models/block/diorite_button_inventory.json	(date 1656871944459)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button_inventory",
+  "textures": {
+    "texture": "minecraft:block/diorite",
+    "particle": "minecraft:block/diorite"
+  }
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/redstone/andesite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/andesite_button.json b/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/andesite_button.json
new file mode 100644
--- /dev/null	(date 1656871944551)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/andesite_button.json	(date 1656871944551)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:redstone/andesite_button"
+    ]
+  },
+  "criteria": {
+    "has_andesite": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "minecraft:andesite"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_andesite"
+    ]
+  ]
+}
Index: src/main/resources/data/slabsnstairs/loot_tables/blocks/diorite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_tables/blocks/diorite_button.json b/src/main/resources/data/slabsnstairs/loot_tables/blocks/diorite_button.json
new file mode 100644
--- /dev/null	(date 1656871944630)
+++ b/src/main/resources/data/slabsnstairs/loot_tables/blocks/diorite_button.json	(date 1656871944630)
@@ -0,0 +1,20 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1.0,
+      "bonus_rolls": 0.0,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "slabsnstairs:diorite_button"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
Index: src/main/resources/data/slabsnstairs/loot_tables/blocks/granite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_tables/blocks/granite_button.json b/src/main/resources/data/slabsnstairs/loot_tables/blocks/granite_button.json
new file mode 100644
--- /dev/null	(date 1656871944678)
+++ b/src/main/resources/data/slabsnstairs/loot_tables/blocks/granite_button.json	(date 1656871944678)
@@ -0,0 +1,20 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1.0,
+      "bonus_rolls": 0.0,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "slabsnstairs:granite_button"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
Index: src/main/resources/assets/slabsnstairs/models/item/andesite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/andesite_button.json b/src/main/resources/assets/slabsnstairs/models/item/andesite_button.json
new file mode 100644
--- /dev/null	(date 1656871944043)
+++ b/src/main/resources/assets/slabsnstairs/models/item/andesite_button.json	(date 1656871944043)
@@ -0,0 +1,3 @@
+{
+  "parent": "slabsnstairs:block/andesite_button_inventory"
+}
Index: src/main/resources/data/slabsnstairs/loot_tables/blocks/andesite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_tables/blocks/andesite_button.json b/src/main/resources/data/slabsnstairs/loot_tables/blocks/andesite_button.json
new file mode 100644
--- /dev/null	(date 1656871944251)
+++ b/src/main/resources/data/slabsnstairs/loot_tables/blocks/andesite_button.json	(date 1656871944251)
@@ -0,0 +1,20 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1.0,
+      "bonus_rolls": 0.0,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "slabsnstairs:andesite_button"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
Index: src/main/resources/assets/slabsnstairs/models/block/diorite_button_pressed.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/diorite_button_pressed.json b/src/main/resources/assets/slabsnstairs/models/block/diorite_button_pressed.json
new file mode 100644
--- /dev/null	(date 1656871944344)
+++ b/src/main/resources/assets/slabsnstairs/models/block/diorite_button_pressed.json	(date 1656871944344)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button_pressed",
+  "textures": {
+    "texture": "minecraft:block/diorite",
+    "particle": "minecraft:block/diorite"
+  }
+}
Index: src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_stairs_sc.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_stairs_sc.json b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_stairs_sc.json
new file mode 100644
--- /dev/null	(date 1656871944927)
+++ b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_stairs_sc.json	(date 1656871944927)
@@ -0,0 +1,8 @@
+{
+  "type": "minecraft:stonecutting",
+  "ingredient": {
+    "item": "slabsnstairs:citrine_block"
+  },
+  "result": "slabsnstairs:citrine_stairs",
+  "count": 2
+}
Index: src/main/resources/data/slabsnstairs/recipes/redstone/cobblestone_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/redstone/cobblestone_button.json b/src/main/resources/data/slabsnstairs/recipes/redstone/cobblestone_button.json
new file mode 100644
--- /dev/null	(date 1656871944988)
+++ b/src/main/resources/data/slabsnstairs/recipes/redstone/cobblestone_button.json	(date 1656871944988)
@@ -0,0 +1,11 @@
+{
+  "type": "minecraft:crafting_shapeless",
+  "ingredients": [
+    {
+      "item": "minecraft:cobblestone"
+    }
+  ],
+  "result": {
+    "item": "slabsnstairs:cobblestone_button"
+  }
+}
Index: src/main/resources/data/minecraft/tags/blocks/mineable/axe.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/minecraft/tags/blocks/mineable/axe.json b/src/main/resources/data/minecraft/tags/blocks/mineable/axe.json
new file mode 100644
--- /dev/null	(date 1656871945103)
+++ b/src/main/resources/data/minecraft/tags/blocks/mineable/axe.json	(date 1656871945103)
@@ -0,0 +1,6 @@
+{
+  "replace": false,
+  "values": [
+
+  ]
+}
Index: src/main/resources/assets/slabsnstairs/models/block/diorite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/diorite_button.json b/src/main/resources/assets/slabsnstairs/models/block/diorite_button.json
new file mode 100644
--- /dev/null	(date 1656871944757)
+++ b/src/main/resources/assets/slabsnstairs/models/block/diorite_button.json	(date 1656871944757)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button",
+  "textures": {
+    "texture": "minecraft:block/diorite",
+    "particle": "minecraft:block/diorite"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/granite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/granite_button.json b/src/main/resources/assets/slabsnstairs/models/block/granite_button.json
new file mode 100644
--- /dev/null	(date 1656871944839)
+++ b/src/main/resources/assets/slabsnstairs/models/block/granite_button.json	(date 1656871944839)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button",
+  "textures": {
+    "texture": "minecraft:block/granite",
+    "particle": "minecraft:block/granite"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/blockstates/granite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/blockstates/granite_button.json b/src/main/resources/assets/slabsnstairs/blockstates/granite_button.json
new file mode 100644
--- /dev/null	(date 1656871944858)
+++ b/src/main/resources/assets/slabsnstairs/blockstates/granite_button.json	(date 1656871944858)
@@ -0,0 +1,118 @@
+{
+  "variants": {
+    "face=ceiling,facing=east,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "y": 270,
+      "x": 180
+    },
+    "face=ceiling,facing=east,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "y": 270,
+      "x": 180
+    },
+    "face=ceiling,facing=north,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "y": 180,
+      "x": 180
+    },
+    "face=ceiling,facing=north,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "y": 180,
+      "x": 180
+    },
+    "face=ceiling,facing=south,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "x": 180
+    },
+    "face=ceiling,facing=south,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "x": 180
+    },
+    "face=ceiling,facing=west,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "y": 90,
+      "x": 180
+    },
+    "face=ceiling,facing=west,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "y": 90,
+      "x": 180
+    },
+    "face=floor,facing=east,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "y": 90
+    },
+    "face=floor,facing=east,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "y": 90
+    },
+    "face=floor,facing=north,powered=false": {
+      "model": "slabsnstairs:block/granite_button"
+    },
+    "face=floor,facing=north,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed"
+    },
+    "face=floor,facing=south,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "y": 180
+    },
+    "face=floor,facing=south,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "y": 180
+    },
+    "face=floor,facing=west,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "y": 270
+    },
+    "face=floor,facing=west,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "y": 270
+    },
+    "face=wall,facing=east,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "y": 90,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=east,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "y": 90,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=north,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=north,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=south,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "y": 180,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=south,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "y": 180,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=west,powered=false": {
+      "model": "slabsnstairs:block/granite_button",
+      "y": 270,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=west,powered=true": {
+      "model": "slabsnstairs:block/granite_button_pressed",
+      "y": 270,
+      "x": 90,
+      "uvlock": true
+    }
+  }
+}
Index: src/main/resources/data/minecraft/tags/blocks/mineable/shovel.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/minecraft/tags/blocks/mineable/shovel.json b/src/main/resources/data/minecraft/tags/blocks/mineable/shovel.json
new file mode 100644
--- /dev/null	(date 1656871943500)
+++ b/src/main/resources/data/minecraft/tags/blocks/mineable/shovel.json	(date 1656871943500)
@@ -0,0 +1,6 @@
+{
+  "replace": false,
+  "values": [
+
+  ]
+}
Index: src/main/resources/data/minecraft/tags/blocks/needs_stone_tool.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/minecraft/tags/blocks/needs_stone_tool.json b/src/main/resources/data/minecraft/tags/blocks/needs_stone_tool.json
new file mode 100644
--- /dev/null	(date 1656871943672)
+++ b/src/main/resources/data/minecraft/tags/blocks/needs_stone_tool.json	(date 1656871943672)
@@ -0,0 +1,6 @@
+{
+  "replace": false,
+  "values": [
+
+  ]
+}
Index: src/main/resources/data/minecraft/tags/blocks/needs_netherite_tool.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/minecraft/tags/blocks/needs_netherite_tool.json b/src/main/resources/data/minecraft/tags/blocks/needs_netherite_tool.json
new file mode 100644
--- /dev/null	(date 1656871943731)
+++ b/src/main/resources/data/minecraft/tags/blocks/needs_netherite_tool.json	(date 1656871943731)
@@ -0,0 +1,6 @@
+{
+  "replace": false,
+  "values": [
+
+  ]
+}
Index: src/main/resources/data/minecraft/tags/blocks/mineable/pickaxe.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/minecraft/tags/blocks/mineable/pickaxe.json b/src/main/resources/data/minecraft/tags/blocks/mineable/pickaxe.json
new file mode 100644
--- /dev/null	(date 1656871943166)
+++ b/src/main/resources/data/minecraft/tags/blocks/mineable/pickaxe.json	(date 1656871943166)
@@ -0,0 +1,11 @@
+{
+  "replace": false,
+  "values": [
+    "slabsnstairs:citrine_block",
+    "slabsnstairs:citrine_slab",
+    "slabsnstairs:cobblestone_button",
+    "slabsnstairs:andesite_button",
+    "slabsnstairs:diorite_button",
+    "slabsnstairs:granite_button"
+  ]
+}
Index: src/main/resources/data/slabsnstairs/recipes/misc/growth_stop.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/misc/growth_stop.json b/src/main/resources/data/slabsnstairs/recipes/misc/growth_stop.json
new file mode 100644
--- /dev/null	(date 1656871943389)
+++ b/src/main/resources/data/slabsnstairs/recipes/misc/growth_stop.json	(date 1656871943389)
@@ -0,0 +1,19 @@
+{
+    "type": "minecraft:crafting_shaped",
+    "pattern": [
+        " * "
+    ],
+    "key": {
+        "*": [
+            {
+                "item": "minecraft:stone_button"
+            },{
+                "item": "slabsnstairs:cobblestone_button"
+            }
+        ]
+    },
+    "result": {
+        "item": "slabsnstairs:growth_stop",
+        "count": 2
+    }
+}
Index: src/main/resources/data/slabsnstairs/loot_tables/blocks/citrine_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_tables/blocks/citrine_slab.json b/src/main/resources/data/slabsnstairs/loot_tables/blocks/citrine_slab.json
new file mode 100644
--- /dev/null	(date 1656871943401)
+++ b/src/main/resources/data/slabsnstairs/loot_tables/blocks/citrine_slab.json	(date 1656871943401)
@@ -0,0 +1,34 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1.0,
+      "bonus_rolls": 0.0,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "functions": [
+            {
+              "function": "minecraft:set_count",
+              "conditions": [
+                {
+                  "condition": "minecraft:block_state_property",
+                  "block": "slabsnstairs:citrine_slab",
+                  "properties": {
+                    "type": "double"
+                  }
+                }
+              ],
+              "count": 2.0,
+              "add": false
+            },
+            {
+              "function": "minecraft:explosion_decay"
+            }
+          ],
+          "name": "slabsnstairs:citrine_slab"
+        }
+      ]
+    }
+  ]
+}
Index: src/main/resources/assets/slabsnstairs/models/block/andesite_button_inventory.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/andesite_button_inventory.json b/src/main/resources/assets/slabsnstairs/models/block/andesite_button_inventory.json
new file mode 100644
--- /dev/null	(date 1656871943846)
+++ b/src/main/resources/assets/slabsnstairs/models/block/andesite_button_inventory.json	(date 1656871943846)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button_inventory",
+  "textures": {
+    "texture": "minecraft:block/andesite",
+    "particle": "minecraft:block/andesite"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/packed_ice_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/packed_ice_slab.json b/src/main/resources/assets/slabsnstairs/models/block/packed_ice_slab.json
new file mode 100644
--- /dev/null	(date 1656871943927)
+++ b/src/main/resources/assets/slabsnstairs/models/block/packed_ice_slab.json	(date 1656871943927)
@@ -0,0 +1,8 @@
+{
+  "parent": "minecraft:block/slab",
+  "textures": {
+    "bottom": "minecraft:block/packed_ice",
+    "top": "minecraft:block/packed_ice",
+    "side": "minecraft:block/packed_ice"
+  }
+}
Index: src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInDesertChestsAdditionModifier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInDesertChestsAdditionModifier.java b/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInDesertChestsAdditionModifier.java
new file mode 100644
--- /dev/null	(date 1656871943747)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInDesertChestsAdditionModifier.java	(date 1656871943747)
@@ -0,0 +1,46 @@
+package net.dancervlt69.slabsnstairs.Init.Events.Loot;
+
+import com.google.gson.JsonObject;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.GsonHelper;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.storage.loot.LootContext;
+import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
+import net.minecraftforge.common.loot.LootModifier;
+import net.minecraftforge.registries.ForgeRegistries;
+
+import javax.annotation.Nonnull;
+import java.util.List;
+
+public class CitrineCoinInDesertChestsAdditionModifier extends LootModifier {
+    private final Item addition;
+    protected CitrineCoinInDesertChestsAdditionModifier(LootItemCondition[] conditionsIn, Item addition) {
+        super(conditionsIn);
+        this.addition = addition;
+    }
+    @Nonnull
+    @Override
+    protected List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {
+        if(context.getRandom().nextFloat() > 0.5F) {
+            generatedLoot.add(new ItemStack(addition, 2));
+        }
+        return generatedLoot;
+    }
+    public static class Serializer extends GlobalLootModifierSerializer<CitrineCoinInDesertChestsAdditionModifier> {
+        @Override
+        public CitrineCoinInDesertChestsAdditionModifier read(ResourceLocation name, JsonObject object,
+                                                              LootItemCondition[] conditionIn) {
+            Item addition = ForgeRegistries.ITEMS.getValue(
+                    new ResourceLocation(GsonHelper.getAsString(object, "addition")));
+            return new CitrineCoinInDesertChestsAdditionModifier(conditionIn, addition);
+        }
+        @Override
+        public JsonObject write(CitrineCoinInDesertChestsAdditionModifier instance) {
+            JsonObject json = makeConditions(instance.conditions);
+            json.addProperty("addition", ForgeRegistries.ITEMS.getKey(instance.addition).toString());
+            return json;
+        }
+    }
+}
Index: src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_plains_chests.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_plains_chests.json b/src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_plains_chests.json
new file mode 100644
--- /dev/null	(date 1656871947748)
+++ b/src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_plains_chests.json	(date 1656871947748)
@@ -0,0 +1,10 @@
+{
+  "conditions": [
+    {
+      "condition": "forge:loot_table_id",
+      "loot_table_id": "minecraft:chests/village/village_plains_house"
+    }
+  ],
+  "addition": "slabsnstairs:citrine_coin",
+  "type": "slabsnstairs:citrine_coin_in_plains_chests"
+}
Index: src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_snowy_chests.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_snowy_chests.json b/src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_snowy_chests.json
new file mode 100644
--- /dev/null	(date 1656871947964)
+++ b/src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_snowy_chests.json	(date 1656871947964)
@@ -0,0 +1,10 @@
+{
+  "conditions": [
+    {
+      "condition": "forge:loot_table_id",
+      "loot_table_id": "minecraft:chests/village/village_snowy_house"
+    }
+  ],
+  "addition": "slabsnstairs:citrine_coin",
+  "type": "slabsnstairs:citrine_coin_in_snowy_chests"
+}
Index: src/main/resources/data/slabsnstairs/loot_tables/chests.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_tables/chests.json b/src/main/resources/data/slabsnstairs/loot_tables/chests.json
new file mode 100644
--- /dev/null	(date 1656871948057)
+++ b/src/main/resources/data/slabsnstairs/loot_tables/chests.json	(date 1656871948057)
@@ -0,0 +1,10 @@
+{
+  "replace": false,
+  "values": [
+    "minecraft:chests/village/village_desert_house",
+    "minecraft:chests/village/village_plains_house",
+    "minecraft:chests/village/village_savanna_house",
+    "minecraft:chests/village/village_snowy_house",
+    "minecraft:chests/village/village_taiga_house"
+  ]
+}
Index: src/main/resources/assets/slabsnstairs/blockstates/diorite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/blockstates/diorite_button.json b/src/main/resources/assets/slabsnstairs/blockstates/diorite_button.json
new file mode 100644
--- /dev/null	(date 1656871948069)
+++ b/src/main/resources/assets/slabsnstairs/blockstates/diorite_button.json	(date 1656871948069)
@@ -0,0 +1,118 @@
+{
+  "variants": {
+    "face=ceiling,facing=east,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "y": 270,
+      "x": 180
+    },
+    "face=ceiling,facing=east,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "y": 270,
+      "x": 180
+    },
+    "face=ceiling,facing=north,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "y": 180,
+      "x": 180
+    },
+    "face=ceiling,facing=north,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "y": 180,
+      "x": 180
+    },
+    "face=ceiling,facing=south,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "x": 180
+    },
+    "face=ceiling,facing=south,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "x": 180
+    },
+    "face=ceiling,facing=west,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "y": 90,
+      "x": 180
+    },
+    "face=ceiling,facing=west,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "y": 90,
+      "x": 180
+    },
+    "face=floor,facing=east,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "y": 90
+    },
+    "face=floor,facing=east,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "y": 90
+    },
+    "face=floor,facing=north,powered=false": {
+      "model": "slabsnstairs:block/diorite_button"
+    },
+    "face=floor,facing=north,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed"
+    },
+    "face=floor,facing=south,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "y": 180
+    },
+    "face=floor,facing=south,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "y": 180
+    },
+    "face=floor,facing=west,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "y": 270
+    },
+    "face=floor,facing=west,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "y": 270
+    },
+    "face=wall,facing=east,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "y": 90,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=east,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "y": 90,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=north,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=north,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=south,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "y": 180,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=south,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "y": 180,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=west,powered=false": {
+      "model": "slabsnstairs:block/diorite_button",
+      "y": 270,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=west,powered=true": {
+      "model": "slabsnstairs:block/diorite_button_pressed",
+      "y": 270,
+      "x": 90,
+      "uvlock": true
+    }
+  }
+}
Index: src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_desert_chests.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_desert_chests.json b/src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_desert_chests.json
new file mode 100644
--- /dev/null	(date 1656871947561)
+++ b/src/main/resources/data/slabsnstairs/loot_modifiers/citrine_coin_in_desert_chests.json	(date 1656871947561)
@@ -0,0 +1,10 @@
+{
+  "conditions": [
+    {
+      "condition": "forge:loot_table_id",
+      "loot_table_id": "minecraft:chests/village/village_desert_house"
+    }
+  ],
+  "addition": "slabsnstairs:citrine_coin",
+  "type": "slabsnstairs:citrine_coin_in_desert_chests"
+}
Index: src/main/resources/assets/slabsnstairs/models/block/andesite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/andesite_button.json b/src/main/resources/assets/slabsnstairs/models/block/andesite_button.json
new file mode 100644
--- /dev/null	(date 1656871947644)
+++ b/src/main/resources/assets/slabsnstairs/models/block/andesite_button.json	(date 1656871947644)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button",
+  "textures": {
+    "texture": "minecraft:block/andesite",
+    "particle": "minecraft:block/andesite"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/blockstates/andesite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/blockstates/andesite_button.json b/src/main/resources/assets/slabsnstairs/blockstates/andesite_button.json
new file mode 100644
--- /dev/null	(date 1656871947664)
+++ b/src/main/resources/assets/slabsnstairs/blockstates/andesite_button.json	(date 1656871947664)
@@ -0,0 +1,118 @@
+{
+  "variants": {
+    "face=ceiling,facing=east,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "y": 270,
+      "x": 180
+    },
+    "face=ceiling,facing=east,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "y": 270,
+      "x": 180
+    },
+    "face=ceiling,facing=north,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "y": 180,
+      "x": 180
+    },
+    "face=ceiling,facing=north,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "y": 180,
+      "x": 180
+    },
+    "face=ceiling,facing=south,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "x": 180
+    },
+    "face=ceiling,facing=south,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "x": 180
+    },
+    "face=ceiling,facing=west,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "y": 90,
+      "x": 180
+    },
+    "face=ceiling,facing=west,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "y": 90,
+      "x": 180
+    },
+    "face=floor,facing=east,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "y": 90
+    },
+    "face=floor,facing=east,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "y": 90
+    },
+    "face=floor,facing=north,powered=false": {
+      "model": "slabsnstairs:block/andesite_button"
+    },
+    "face=floor,facing=north,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed"
+    },
+    "face=floor,facing=south,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "y": 180
+    },
+    "face=floor,facing=south,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "y": 180
+    },
+    "face=floor,facing=west,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "y": 270
+    },
+    "face=floor,facing=west,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "y": 270
+    },
+    "face=wall,facing=east,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "y": 90,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=east,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "y": 90,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=north,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=north,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=south,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "y": 180,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=south,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "y": 180,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=west,powered=false": {
+      "model": "slabsnstairs:block/andesite_button",
+      "y": 270,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=west,powered=true": {
+      "model": "slabsnstairs:block/andesite_button_pressed",
+      "y": 270,
+      "x": 90,
+      "uvlock": true
+    }
+  }
+}
Index: src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInPlainsChestsAdditionModifier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInPlainsChestsAdditionModifier.java b/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInPlainsChestsAdditionModifier.java
new file mode 100644
--- /dev/null	(date 1656871947671)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInPlainsChestsAdditionModifier.java	(date 1656871947671)
@@ -0,0 +1,46 @@
+package net.dancervlt69.slabsnstairs.Init.Events.Loot;
+
+import com.google.gson.JsonObject;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.GsonHelper;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.storage.loot.LootContext;
+import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
+import net.minecraftforge.common.loot.LootModifier;
+import net.minecraftforge.registries.ForgeRegistries;
+
+import javax.annotation.Nonnull;
+import java.util.List;
+public class CitrineCoinInPlainsChestsAdditionModifier extends LootModifier {
+    private final Item addition;
+    protected CitrineCoinInPlainsChestsAdditionModifier(LootItemCondition[] conditionsIn, Item addition) {
+        super(conditionsIn);
+        this.addition = addition;
+    }
+
+    @Nonnull
+    @Override
+    protected List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {
+        if(context.getRandom().nextFloat() > 0.5F) {
+            generatedLoot.add(new ItemStack(addition, 2));
+        }
+        return generatedLoot;
+    }
+    public static class Serializer extends GlobalLootModifierSerializer<CitrineCoinInPlainsChestsAdditionModifier> {
+        @Override
+        public CitrineCoinInPlainsChestsAdditionModifier read(ResourceLocation name, JsonObject object,
+                                                              LootItemCondition[] conditionIn) {
+            Item addition = ForgeRegistries.ITEMS.getValue(
+                    new ResourceLocation(GsonHelper.getAsString(object, "addition")));
+            return new CitrineCoinInPlainsChestsAdditionModifier(conditionIn, addition);
+        }
+        @Override
+        public JsonObject write(CitrineCoinInPlainsChestsAdditionModifier instance) {
+            JsonObject json = makeConditions(instance.conditions);
+            json.addProperty("addition", ForgeRegistries.ITEMS.getKey(instance.addition).toString());
+            return json;
+        }
+    }
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/redstone/granite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/granite_button.json b/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/granite_button.json
new file mode 100644
--- /dev/null	(date 1656871949003)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/granite_button.json	(date 1656871949003)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:redstone/granite_button"
+    ]
+  },
+  "criteria": {
+    "has_granite": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "minecraft:granite"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_granite"
+    ]
+  ]
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/redstone/diorite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/diorite_button.json b/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/diorite_button.json
new file mode 100644
--- /dev/null	(date 1656871949211)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/diorite_button.json	(date 1656871949211)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:redstone/diorite_button"
+    ]
+  },
+  "criteria": {
+    "has_diorite": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "minecraft:diorite"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_diorite"
+    ]
+  ]
+}
Index: src/main/resources/data/slabsnstairs/recipes/redstone/andesite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/redstone/andesite_button.json b/src/main/resources/data/slabsnstairs/recipes/redstone/andesite_button.json
new file mode 100644
--- /dev/null	(date 1656871949280)
+++ b/src/main/resources/data/slabsnstairs/recipes/redstone/andesite_button.json	(date 1656871949280)
@@ -0,0 +1,11 @@
+{
+  "type": "minecraft:crafting_shapeless",
+  "ingredients": [
+    {
+      "item": "minecraft:andesite"
+    }
+  ],
+  "result": {
+    "item": "slabsnstairs:andesite_button"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/blockstates/citrine_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/blockstates/citrine_slab.json b/src/main/resources/assets/slabsnstairs/blockstates/citrine_slab.json
new file mode 100644
--- /dev/null	(date 1656871949504)
+++ b/src/main/resources/assets/slabsnstairs/blockstates/citrine_slab.json	(date 1656871949504)
@@ -0,0 +1,13 @@
+{
+  "variants": {
+    "type=bottom": {
+      "model": "slabsnstairs:block/citrine_slab"
+    },
+    "type=double": {
+      "model": "slabsnstairs:block/citrine_block"
+    },
+    "type=top": {
+      "model": "slabsnstairs:block/citrine_slab_top"
+    }
+  }
+}
Index: src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInSnowyChestsAdditionModifier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInSnowyChestsAdditionModifier.java b/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInSnowyChestsAdditionModifier.java
new file mode 100644
--- /dev/null	(date 1656871948078)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/Loot/CitrineCoinInSnowyChestsAdditionModifier.java	(date 1656871948078)
@@ -0,0 +1,46 @@
+package net.dancervlt69.slabsnstairs.Init.Events.Loot;
+
+import com.google.gson.JsonObject;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.util.GsonHelper;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.storage.loot.LootContext;
+import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
+import net.minecraftforge.common.loot.LootModifier;
+import net.minecraftforge.registries.ForgeRegistries;
+
+import javax.annotation.Nonnull;
+import java.util.List;
+
+public class CitrineCoinInSnowyChestsAdditionModifier extends LootModifier {
+    private final Item addition;
+    protected CitrineCoinInSnowyChestsAdditionModifier(LootItemCondition[] conditionsIn, Item addition) {
+        super(conditionsIn);
+        this.addition = addition;
+    }
+    @Nonnull
+    @Override
+    protected List<ItemStack> doApply(List<ItemStack> generatedLoot, LootContext context) {
+        if(context.getRandom().nextFloat() > 0.5F) {
+            generatedLoot.add(new ItemStack(addition, 2));
+        }
+        return generatedLoot;
+    }
+    public static class Serializer extends GlobalLootModifierSerializer<CitrineCoinInSnowyChestsAdditionModifier> {
+        @Override
+        public CitrineCoinInSnowyChestsAdditionModifier read(ResourceLocation name, JsonObject object,
+                                                             LootItemCondition[] conditionIn) {
+            Item addition = ForgeRegistries.ITEMS.getValue(
+                    new ResourceLocation(GsonHelper.getAsString(object, "addition")));
+            return new CitrineCoinInSnowyChestsAdditionModifier(conditionIn, addition);
+        }
+        @Override
+        public JsonObject write(CitrineCoinInSnowyChestsAdditionModifier instance) {
+            JsonObject json = makeConditions(instance.conditions);
+            json.addProperty("addition", ForgeRegistries.ITEMS.getKey(instance.addition).toString());
+            return json;
+        }
+    }
+}
Index: src/main/resources/data/slabsnstairs/recipes/redstone/granite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/redstone/granite_button.json b/src/main/resources/data/slabsnstairs/recipes/redstone/granite_button.json
new file mode 100644
--- /dev/null	(date 1656871948386)
+++ b/src/main/resources/data/slabsnstairs/recipes/redstone/granite_button.json	(date 1656871948386)
@@ -0,0 +1,11 @@
+{
+  "type": "minecraft:crafting_shapeless",
+  "ingredients": [
+    {
+      "item": "minecraft:granite"
+    }
+  ],
+  "result": {
+    "item": "slabsnstairs:granite_button"
+  }
+}
Index: src/main/resources/data/slabsnstairs/recipes/redstone/diorite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/redstone/diorite_button.json b/src/main/resources/data/slabsnstairs/recipes/redstone/diorite_button.json
new file mode 100644
--- /dev/null	(date 1656871948483)
+++ b/src/main/resources/data/slabsnstairs/recipes/redstone/diorite_button.json	(date 1656871948483)
@@ -0,0 +1,11 @@
+{
+  "type": "minecraft:crafting_shapeless",
+  "ingredients": [
+    {
+      "item": "minecraft:diorite"
+    }
+  ],
+  "result": {
+    "item": "slabsnstairs:diorite_button"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/item/diorite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/diorite_button.json b/src/main/resources/assets/slabsnstairs/models/item/diorite_button.json
new file mode 100644
--- /dev/null	(date 1656871948772)
+++ b/src/main/resources/assets/slabsnstairs/models/item/diorite_button.json	(date 1656871948772)
@@ -0,0 +1,3 @@
+{
+  "parent": "slabsnstairs:block/diorite_button_inventory"
+}
Index: src/main/resources/data/slabsnstairs/tags/items/sticks.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/tags/items/sticks.json b/src/main/resources/data/slabsnstairs/tags/items/sticks.json
new file mode 100644
--- /dev/null	(date 1656871945653)
+++ b/src/main/resources/data/slabsnstairs/tags/items/sticks.json	(date 1656871945653)
@@ -0,0 +1,7 @@
+{
+  "replace": false,
+  "values": [
+    "minecraft:stick",
+    "minecraft:bamboo"
+  ]
+}
Index: src/main/resources/assets/slabsnstairs/models/item/packed_ice_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/packed_ice_slab.json b/src/main/resources/assets/slabsnstairs/models/item/packed_ice_slab.json
new file mode 100644
--- /dev/null	(date 1656871945900)
+++ b/src/main/resources/assets/slabsnstairs/models/item/packed_ice_slab.json	(date 1656871945900)
@@ -0,0 +1,3 @@
+{
+  "parent": "slabsnstairs:block/packed_ice_slab"
+}
Index: src/main/resources/assets/slabsnstairs/models/item/blue_ice_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/blue_ice_slab.json b/src/main/resources/assets/slabsnstairs/models/item/blue_ice_slab.json
new file mode 100644
--- /dev/null	(date 1656871946142)
+++ b/src/main/resources/assets/slabsnstairs/models/item/blue_ice_slab.json	(date 1656871946142)
@@ -0,0 +1,3 @@
+{
+  "parent": "slabsnstairs:block/blue_ice_slab"
+}
Index: src/main/resources/assets/slabsnstairs/models/block/cobblestone_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/cobblestone_button.json b/src/main/resources/assets/slabsnstairs/models/block/cobblestone_button.json
new file mode 100644
--- /dev/null	(date 1656871946315)
+++ b/src/main/resources/assets/slabsnstairs/models/block/cobblestone_button.json	(date 1656871946315)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button",
+  "textures": {
+    "texture": "minecraft:block/cobblestone",
+    "particle": "minecraft:block/cobblestone"
+  }
+}
Index: src/main/resources/data/slabsnstairs/recipes/misc/citrine.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/misc/citrine.json b/src/main/resources/data/slabsnstairs/recipes/misc/citrine.json
new file mode 100644
--- /dev/null	(date 1656871945184)
+++ b/src/main/resources/data/slabsnstairs/recipes/misc/citrine.json	(date 1656871945184)
@@ -0,0 +1,15 @@
+{
+    "type": "minecraft:crafting_shaped",
+    "pattern": [
+        "#"
+    ],
+    "key": {
+        "#": {
+            "item": "slabsnstairs:citrine_block"
+        }
+    },
+    "result": {
+        "item": "slabsnstairs:citrine",
+        "count": 9
+    }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/andesite_button_pressed.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/andesite_button_pressed.json b/src/main/resources/assets/slabsnstairs/models/block/andesite_button_pressed.json
new file mode 100644
--- /dev/null	(date 1656871945323)
+++ b/src/main/resources/assets/slabsnstairs/models/block/andesite_button_pressed.json	(date 1656871945323)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button_pressed",
+  "textures": {
+    "texture": "minecraft:block/andesite",
+    "particle": "minecraft:block/andesite"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/granite_button_inventory.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/granite_button_inventory.json b/src/main/resources/assets/slabsnstairs/models/block/granite_button_inventory.json
new file mode 100644
--- /dev/null	(date 1656871945404)
+++ b/src/main/resources/assets/slabsnstairs/models/block/granite_button_inventory.json	(date 1656871945404)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button_inventory",
+  "textures": {
+    "texture": "minecraft:block/granite",
+    "particle": "minecraft:block/granite"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/item/citrine_stairs.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/citrine_stairs.json b/src/main/resources/assets/slabsnstairs/models/item/citrine_stairs.json
new file mode 100644
--- /dev/null	(date 1656871947227)
+++ b/src/main/resources/assets/slabsnstairs/models/item/citrine_stairs.json	(date 1656871947227)
@@ -0,0 +1,3 @@
+{
+  "parent": "slabsnstairs:block/citrine_stairs"
+}
Index: src/main/resources/assets/slabsnstairs/models/item/citrine.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/citrine.json b/src/main/resources/assets/slabsnstairs/models/item/citrine.json
new file mode 100644
--- /dev/null	(date 1656871947411)
+++ b/src/main/resources/assets/slabsnstairs/models/item/citrine.json	(date 1656871947411)
@@ -0,0 +1,6 @@
+{
+	"parent": "minecraft:item/generated",
+	"textures": {
+		"layer0": "slabsnstairs:item/citrine"
+	}
+}
Index: src/main/resources/assets/slabsnstairs/models/item/citrine_block.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/citrine_block.json b/src/main/resources/assets/slabsnstairs/models/item/citrine_block.json
new file mode 100644
--- /dev/null	(date 1656871947479)
+++ b/src/main/resources/assets/slabsnstairs/models/item/citrine_block.json	(date 1656871947479)
@@ -0,0 +1,3 @@
+{
+	"parent": "slabsnstairs:block/citrine_block"
+}
Index: src/main/resources/assets/slabsnstairs/models/block/citrine_stairs.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/citrine_stairs.json b/src/main/resources/assets/slabsnstairs/models/block/citrine_stairs.json
new file mode 100644
--- /dev/null	(date 1656871946381)
+++ b/src/main/resources/assets/slabsnstairs/models/block/citrine_stairs.json	(date 1656871946381)
@@ -0,0 +1,8 @@
+{
+  "parent": "minecraft:block/stairs",
+  "textures": {
+    "bottom": "slabsnstairs:block/citrine_block",
+    "top": "slabsnstairs:block/citrine_block",
+    "side": "slabsnstairs:block/citrine_block"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/citrine_slab_top.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/citrine_slab_top.json b/src/main/resources/assets/slabsnstairs/models/block/citrine_slab_top.json
new file mode 100644
--- /dev/null	(date 1656871946511)
+++ b/src/main/resources/assets/slabsnstairs/models/block/citrine_slab_top.json	(date 1656871946511)
@@ -0,0 +1,8 @@
+{
+  "parent": "minecraft:block/slab_top",
+  "textures": {
+    "bottom": "slabsnstairs:block/citrine_block",
+    "top": "slabsnstairs:block/citrine_block",
+    "side": "slabsnstairs:block/citrine_slab_top"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/citrine_stairs_outer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/citrine_stairs_outer.json b/src/main/resources/assets/slabsnstairs/models/block/citrine_stairs_outer.json
new file mode 100644
--- /dev/null	(date 1656871946595)
+++ b/src/main/resources/assets/slabsnstairs/models/block/citrine_stairs_outer.json	(date 1656871946595)
@@ -0,0 +1,8 @@
+{
+  "parent": "minecraft:block/outer_stairs",
+  "textures": {
+    "bottom": "slabsnstairs:block/citrine_block",
+    "top": "slabsnstairs:block/citrine_block",
+    "side": "slabsnstairs:block/citrine_block"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/growth_stop__.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/growth_stop__.json b/src/main/resources/assets/slabsnstairs/models/block/growth_stop__.json
new file mode 100644
--- /dev/null	(date 1656871947018)
+++ b/src/main/resources/assets/slabsnstairs/models/block/growth_stop__.json	(date 1656871947018)
@@ -0,0 +1,7 @@
+{
+	"parent": "minecraft:block/cube_all",
+	"textures": {
+		"all": "slabsnstairs:block/growth_stop",
+		"particle": "slabsnstairs:block/growth_stop"
+	}
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_block_from_citrine_slabs.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_block_from_citrine_slabs.json b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_block_from_citrine_slabs.json
new file mode 100644
--- /dev/null	(date 1656871952410)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_block_from_citrine_slabs.json	(date 1656871952410)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:building_blocks/citrine_block_from_citrine_slabs"
+    ]
+  },
+  "criteria": {
+    "has_citrine_slab": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "slabsnstairs:citrine_slab"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_citrine_slab"
+    ]
+  ]
+}
Index: src/main/resources/assets/slabsnstairs/models/item/citrine_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/citrine_slab.json b/src/main/resources/assets/slabsnstairs/models/item/citrine_slab.json
new file mode 100644
--- /dev/null	(date 1656871952499)
+++ b/src/main/resources/assets/slabsnstairs/models/item/citrine_slab.json	(date 1656871952499)
@@ -0,0 +1,3 @@
+{
+  "parent": "slabsnstairs:block/citrine_slab"
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/tools/dowsing_rod.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/tools/dowsing_rod.json b/src/main/resources/data/slabsnstairs/advancements/recipes/tools/dowsing_rod.json
new file mode 100644
--- /dev/null	(date 1656871952628)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/tools/dowsing_rod.json	(date 1656871952628)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:dowsing_rod"
+    ]
+  },
+  "criteria": {
+    "has_sticks": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "tags": [
+              "slabsnstairs:sticks"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_sticks"
+    ]
+  ]
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/misc/citrine.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/misc/citrine.json b/src/main/resources/data/slabsnstairs/advancements/recipes/misc/citrine.json
new file mode 100644
--- /dev/null	(date 1656871951866)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/misc/citrine.json	(date 1656871951866)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:misc/citrine"
+    ]
+  },
+  "criteria": {
+    "has_citrine_block": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "slabsnstairs:citrine_block"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_citrine_block"
+    ]
+  ]
+}
Index: src/main/resources/assets/slabsnstairs/models/block/blue_ice_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/blue_ice_slab.json b/src/main/resources/assets/slabsnstairs/models/block/blue_ice_slab.json
new file mode 100644
--- /dev/null	(date 1656871952212)
+++ b/src/main/resources/assets/slabsnstairs/models/block/blue_ice_slab.json	(date 1656871952212)
@@ -0,0 +1,8 @@
+{
+  "parent": "minecraft:block/slab",
+  "textures": {
+    "bottom": "minecraft:block/blue_ice",
+    "top": "minecraft:block/blue_ice",
+    "side": "minecraft:block/blue_ice"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/granite_button_pressed.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/granite_button_pressed.json b/src/main/resources/assets/slabsnstairs/models/block/granite_button_pressed.json
new file mode 100644
--- /dev/null	(date 1656871953113)
+++ b/src/main/resources/assets/slabsnstairs/models/block/granite_button_pressed.json	(date 1656871953113)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button_pressed",
+  "textures": {
+    "texture": "minecraft:block/granite",
+    "particle": "minecraft:block/granite"
+  }
+}
Index: src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json b/src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json
new file mode 100644
--- /dev/null	(date 1656871953192)
+++ b/src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json	(date 1656871953192)
@@ -0,0 +1,8 @@
+{
+  "replace": false,
+  "entries": [
+    "slabsnstairs:citrine_coin_in_desert_chests",
+    "slabsnstairs:citrine_coin_in_snowy_chests",
+    "slabsnstairs:citrine_coin_in_plains_chests"
+  ]
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_stairs_sc.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_stairs_sc.json b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_stairs_sc.json
new file mode 100644
--- /dev/null	(date 1656871952706)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_stairs_sc.json	(date 1656871952706)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:building_blocks/citrine_stairs_sc"
+    ]
+  },
+  "criteria": {
+    "has_citrine_block": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "slabsnstairs:citrine_block"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_citrine_block"
+    ]
+  ]
+}
Index: src/main/resources/META-INF/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/META-INF/MANIFEST.MF b/src/main/resources/META-INF/MANIFEST.MF
new file mode 100644
--- /dev/null	(date 1656871952789)
+++ b/src/main/resources/META-INF/MANIFEST.MF	(date 1656871952789)
@@ -0,0 +1,9 @@
+Manifest-Version: 1.0
+Specification-Title: SnS - Slabs 'n Stairs
+Specification-Vendor: DancerVLT69
+Specification-Version: 0.0.1.1
+Implementation-Title: SnS - Slabs 'n Stairs
+Implementation-Version: 0.0.1.1
+Implementation-Vendor: DancerVLT69
+Implementation-Timestamp: 2022-06-26T03:42:00+0100
+Automatic-Module-Name: slabsnstairs
Index: src/main/resources/assets/slabsnstairs/blockstates/citrine_stairs.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/blockstates/citrine_stairs.json b/src/main/resources/assets/slabsnstairs/blockstates/citrine_stairs.json
new file mode 100644
--- /dev/null	(date 1656871952840)
+++ b/src/main/resources/assets/slabsnstairs/blockstates/citrine_stairs.json	(date 1656871952840)
@@ -0,0 +1,209 @@
+{
+  "variants": {
+    "facing=east,half=bottom,shape=inner_left": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=east,half=bottom,shape=inner_right": {
+      "model": "slabsnstairs:block/citrine_stairs_inner"
+    },
+    "facing=east,half=bottom,shape=outer_left": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=east,half=bottom,shape=outer_right": {
+      "model": "slabsnstairs:block/citrine_stairs_outer"
+    },
+    "facing=east,half=bottom,shape=straight": {
+      "model": "slabsnstairs:block/citrine_stairs"
+    },
+    "facing=east,half=top,shape=inner_left": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "x": 180,
+      "uvlock": true
+    },
+    "facing=east,half=top,shape=inner_right": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "x": 180,
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=east,half=top,shape=outer_left": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "x": 180,
+      "uvlock": true
+    },
+    "facing=east,half=top,shape=outer_right": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "x": 180,
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=east,half=top,shape=straight": {
+      "model": "slabsnstairs:block/citrine_stairs",
+      "x": 180,
+      "uvlock": true
+    },
+    "facing=north,half=bottom,shape=inner_left": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "y": 180,
+      "uvlock": true
+    },
+    "facing=north,half=bottom,shape=inner_right": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=north,half=bottom,shape=outer_left": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "y": 180,
+      "uvlock": true
+    },
+    "facing=north,half=bottom,shape=outer_right": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=north,half=bottom,shape=straight": {
+      "model": "slabsnstairs:block/citrine_stairs",
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=north,half=top,shape=inner_left": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "x": 180,
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=north,half=top,shape=inner_right": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "x": 180,
+      "uvlock": true
+    },
+    "facing=north,half=top,shape=outer_left": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "x": 180,
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=north,half=top,shape=outer_right": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "x": 180,
+      "uvlock": true
+    },
+    "facing=north,half=top,shape=straight": {
+      "model": "slabsnstairs:block/citrine_stairs",
+      "x": 180,
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=south,half=bottom,shape=inner_left": {
+      "model": "slabsnstairs:block/citrine_stairs_inner"
+    },
+    "facing=south,half=bottom,shape=inner_right": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=south,half=bottom,shape=outer_left": {
+      "model": "slabsnstairs:block/citrine_stairs_outer"
+    },
+    "facing=south,half=bottom,shape=outer_right": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=south,half=bottom,shape=straight": {
+      "model": "slabsnstairs:block/citrine_stairs",
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=south,half=top,shape=inner_left": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "x": 180,
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=south,half=top,shape=inner_right": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "x": 180,
+      "y": 180,
+      "uvlock": true
+    },
+    "facing=south,half=top,shape=outer_left": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "x": 180,
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=south,half=top,shape=outer_right": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "x": 180,
+      "y": 180,
+      "uvlock": true
+    },
+    "facing=south,half=top,shape=straight": {
+      "model": "slabsnstairs:block/citrine_stairs",
+      "x": 180,
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=west,half=bottom,shape=inner_left": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=west,half=bottom,shape=inner_right": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "y": 180,
+      "uvlock": true
+    },
+    "facing=west,half=bottom,shape=outer_left": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "y": 90,
+      "uvlock": true
+    },
+    "facing=west,half=bottom,shape=outer_right": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "y": 180,
+      "uvlock": true
+    },
+    "facing=west,half=bottom,shape=straight": {
+      "model": "slabsnstairs:block/citrine_stairs",
+      "y": 180,
+      "uvlock": true
+    },
+    "facing=west,half=top,shape=inner_left": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "x": 180,
+      "y": 180,
+      "uvlock": true
+    },
+    "facing=west,half=top,shape=inner_right": {
+      "model": "slabsnstairs:block/citrine_stairs_inner",
+      "x": 180,
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=west,half=top,shape=outer_left": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "x": 180,
+      "y": 180,
+      "uvlock": true
+    },
+    "facing=west,half=top,shape=outer_right": {
+      "model": "slabsnstairs:block/citrine_stairs_outer",
+      "x": 180,
+      "y": 270,
+      "uvlock": true
+    },
+    "facing=west,half=top,shape=straight": {
+      "model": "slabsnstairs:block/citrine_stairs",
+      "x": 180,
+      "y": 180,
+      "uvlock": true
+    }
+  }
+}
Index: src/main/java/net/dancervlt69/slabsnstairs/Init/Events/ModEventBusEvents.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/ModEventBusEvents.java b/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/ModEventBusEvents.java
new file mode 100644
--- /dev/null	(date 1656871952890)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/Init/Events/ModEventBusEvents.java	(date 1656871952890)
@@ -0,0 +1,27 @@
+package net.dancervlt69.slabsnstairs.Init.Events;
+
+import net.dancervlt69.slabsnstairs.Init.Events.Loot.CitrineCoinInDesertChestsAdditionModifier;
+import net.dancervlt69.slabsnstairs.SlabsNstairs;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
+import net.minecraftforge.event.RegistryEvent;
+import net.minecraftforge.eventbus.api.SubscribeEvent;
+import net.minecraftforge.fml.common.Mod;
+
+import javax.annotation.Nonnull;
+
+@Mod.EventBusSubscriber(modid = SlabsNstairs.MODID, bus = Mod.EventBusSubscriber.Bus.MOD)
+public class ModEventBusEvents {
+
+    @SubscribeEvent
+    public static void registerModifierSerializers(@Nonnull final RegistryEvent.Register<GlobalLootModifierSerializer<?>> event) {
+        event.getRegistry().registerAll(
+                new CitrineCoinInDesertChestsAdditionModifier.Serializer().setRegistryName
+                        (new ResourceLocation(SlabsNstairs.MODID, "citrine_coin_in_desert_chests")),
+                new CitrineCoinInDesertChestsAdditionModifier.Serializer().setRegistryName
+                        (new ResourceLocation(SlabsNstairs.MODID, "citrine_coin_in_plains_chests")),
+                new CitrineCoinInDesertChestsAdditionModifier.Serializer().setRegistryName
+                        (new ResourceLocation(SlabsNstairs.MODID, "citrine_coin_in_snowy_chests"))
+        );
+    }
+}
Index: src/main/resources/assets/slabsnstairs/blockstates/growth_stop.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/blockstates/growth_stop.json b/src/main/resources/assets/slabsnstairs/blockstates/growth_stop.json
new file mode 100644
--- /dev/null	(date 1656871949927)
+++ b/src/main/resources/assets/slabsnstairs/blockstates/growth_stop.json	(date 1656871949927)
@@ -0,0 +1,7 @@
+{
+  "variants": {
+    "": {
+      "model": "slabsnstairs:block/growth_stop"
+    }
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/cobblestone_button_pressed.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/cobblestone_button_pressed.json b/src/main/resources/assets/slabsnstairs/models/block/cobblestone_button_pressed.json
new file mode 100644
--- /dev/null	(date 1656871950020)
+++ b/src/main/resources/assets/slabsnstairs/models/block/cobblestone_button_pressed.json	(date 1656871950020)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button_pressed",
+  "textures": {
+    "texture": "minecraft:block/cobblestone",
+    "particle": "minecraft:block/cobblestone"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/cobblestone_button_inventory.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/cobblestone_button_inventory.json b/src/main/resources/assets/slabsnstairs/models/block/cobblestone_button_inventory.json
new file mode 100644
--- /dev/null	(date 1656871950135)
+++ b/src/main/resources/assets/slabsnstairs/models/block/cobblestone_button_inventory.json	(date 1656871950135)
@@ -0,0 +1,7 @@
+{
+  "parent": "minecraft:block/button_inventory",
+  "textures": {
+    "texture": "minecraft:block/cobblestone",
+    "particle": "minecraft:block/cobblestone"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/citrine_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/citrine_slab.json b/src/main/resources/assets/slabsnstairs/models/block/citrine_slab.json
new file mode 100644
--- /dev/null	(date 1656871950551)
+++ b/src/main/resources/assets/slabsnstairs/models/block/citrine_slab.json	(date 1656871950551)
@@ -0,0 +1,8 @@
+{
+  "parent": "minecraft:block/slab",
+  "textures": {
+    "bottom": "slabsnstairs:block/citrine_block",
+    "top": "slabsnstairs:block/citrine_block",
+    "side": "slabsnstairs:block/citrine_slab"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/blockstates/cobblestone_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/blockstates/cobblestone_button.json b/src/main/resources/assets/slabsnstairs/blockstates/cobblestone_button.json
new file mode 100644
--- /dev/null	(date 1656871949525)
+++ b/src/main/resources/assets/slabsnstairs/blockstates/cobblestone_button.json	(date 1656871949525)
@@ -0,0 +1,118 @@
+{
+  "variants": {
+    "face=ceiling,facing=east,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "y": 270,
+      "x": 180
+    },
+    "face=ceiling,facing=east,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "y": 270,
+      "x": 180
+    },
+    "face=ceiling,facing=north,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "y": 180,
+      "x": 180
+    },
+    "face=ceiling,facing=north,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "y": 180,
+      "x": 180
+    },
+    "face=ceiling,facing=south,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "x": 180
+    },
+    "face=ceiling,facing=south,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "x": 180
+    },
+    "face=ceiling,facing=west,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "y": 90,
+      "x": 180
+    },
+    "face=ceiling,facing=west,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "y": 90,
+      "x": 180
+    },
+    "face=floor,facing=east,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "y": 90
+    },
+    "face=floor,facing=east,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "y": 90
+    },
+    "face=floor,facing=north,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button"
+    },
+    "face=floor,facing=north,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed"
+    },
+    "face=floor,facing=south,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "y": 180
+    },
+    "face=floor,facing=south,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "y": 180
+    },
+    "face=floor,facing=west,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "y": 270
+    },
+    "face=floor,facing=west,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "y": 270
+    },
+    "face=wall,facing=east,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "y": 90,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=east,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "y": 90,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=north,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=north,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=south,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "y": 180,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=south,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "y": 180,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=west,powered=false": {
+      "model": "slabsnstairs:block/cobblestone_button",
+      "y": 270,
+      "x": 90,
+      "uvlock": true
+    },
+    "face=wall,facing=west,powered=true": {
+      "model": "slabsnstairs:block/cobblestone_button_pressed",
+      "y": 270,
+      "x": 90,
+      "uvlock": true
+    }
+  }
+}
Index: changelog.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/changelog.txt b/changelog.txt
new file mode 100644
--- /dev/null	(date 1656871949615)
+++ b/changelog.txt	(date 1656871949615)
@@ -0,0 +1,15 @@
+Slabs 'n Stairs changelog:
+
+------------------------
+V 0.0.1.110 @ 2022/07/03
+- update Button: remove Collision, like the Stone-Button
+- added Buttons: Andesite, Diorite, Granite
+
+------------------------
+V 0.0.1.109 @ 2022/07/01
+- porting to Minecraft JE 1.18.2
+- updated to Forge 40.1.54
+
+----------------------
+V 0.0.1.0 @ 2022/06/26
+- initial version
Index: src/main/resources/assets/slabsnstairs/blockstates/citrine_block.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/blockstates/citrine_block.json b/src/main/resources/assets/slabsnstairs/blockstates/citrine_block.json
new file mode 100644
--- /dev/null	(date 1656871949720)
+++ b/src/main/resources/assets/slabsnstairs/blockstates/citrine_block.json	(date 1656871949720)
@@ -0,0 +1,7 @@
+{
+  "variants": {
+    "": {
+      "model": "slabsnstairs:block/citrine_block"
+    }
+  }
+}
Index: README.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.txt b/README.txt
new file mode 100644
--- /dev/null	(date 1656871949824)
+++ b/README.txt	(date 1656871949824)
@@ -0,0 +1,2 @@
+Slabs 'n Stairs -
+SnS will give you more Slabs and Stair, and some other (missing) Blocks like Buttons and Pressure Plates in Minecraft Java Edition
Index: src/main/resources/assets/slabsnstairs/lang/de_de.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/lang/de_de.json b/src/main/resources/assets/slabsnstairs/lang/de_de.json
new file mode 100644
--- /dev/null	(date 1656871950996)
+++ b/src/main/resources/assets/slabsnstairs/lang/de_de.json	(date 1656871950996)
@@ -0,0 +1,40 @@
+{
+  "block.slabsnstairs.ice_slab":          "Eisstufe",
+  "block.slabsnstairs.ice_stairs":        "Eistreppe",
+  "block.slabsnstairs.blue_ice_slab":     "Blaueisstufe",
+  "block.slabsnstairs.blue_ice_stairs":   "Blaueistreppe",
+  "block.slabsnstairs.packed_ice_slab":   "Packeisstufe",
+  "block.slabsnstairs.packed_ice_stairs": "Packeistreppe",
+
+  "block.slabsnstairs.citrine_block":         "Citrin Block",
+  "block.slabsnstairs.citrine_ore":           "Citrinerz",
+  "block.slabsnstairs.deepslate_citrine_ore": "Tiefenschiefer Citrinerz",
+  "block.slabsnstairs.citrine_slab":          "Citrinstufe",
+  "block.slabsnstairs.citrine_stairs":        "Citrintreppe",
+
+  "block.slabsnstairs.vertical_ice_slab_northern":  "senkrechte Eisstufe",
+
+  "block.slabsnstairs.andesite_button":           "Andesitknopf",
+  "block.slabsnstairs.polished_andesite_button":  "Polierter AndesitKnopf",
+  "block.slabsnstairs.diorite_button":            "Dioritknopf",
+  "block.slabsnstairs.polished_diorite_button":   "Polierter Dioritknopf",
+  "block.slabsnstairs.granite_button":            "Granitknopf",
+  "block.slabsnstairs.polished_granite_button":   "Polierter Granitknopf",
+  "block.slabsnstairs.cobblestone_button":        "Bruchsteinknopf",
+  "block.slabsnstairs.growth_stop":               "Wachstumsstopper",
+
+  "item.slabsnstairs.citrine":      "Citrin Kristall",
+  "item.slabsnstairs.raw_citrine":  "Unbehandelter Citrin",
+  "item.slabsnstairs.citrine_coin": "Citrin-Münze",
+  "item.slabsnstairs.dowsing_rod":  "Wünschelrute",
+
+  "item.slabsnstairs.dowsing_rod.found":        "Hab was: ",
+  "item.slabsnstairs.dowsing_rod.located":      "  bei ",
+  "item.slabsnstairs.dowsing_rod.no_valuables": "Nichts Wertvolles gefunden.",
+
+  "itemGroup.modtab_tab": "Citrin",
+
+  "tooltip.slabsnstairs.block.citrine_block.shift":   "Du erhältst 9 Citrin Kristalle von diesem Block.",
+  "tooltip.slabsnstairs.dowsing_rod.tooltip.shift":   "Die Wünschelrute zeigt dir bei Rechtsklick//n die Position diverser Erze an.",
+  "tooltip.slabsnstairs.dowsing_rod.tooltip":         "Für mehr Information §eShift§r gedrückt halten."
+}
Index: src/main/resources/assets/slabsnstairs/models/block/citrine_stairs_inner.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/citrine_stairs_inner.json b/src/main/resources/assets/slabsnstairs/models/block/citrine_stairs_inner.json
new file mode 100644
--- /dev/null	(date 1656871951349)
+++ b/src/main/resources/assets/slabsnstairs/models/block/citrine_stairs_inner.json	(date 1656871951349)
@@ -0,0 +1,8 @@
+{
+  "parent": "minecraft:block/inner_stairs",
+  "textures": {
+    "bottom": "slabsnstairs:block/citrine_block",
+    "top": "slabsnstairs:block/citrine_block",
+    "side": "slabsnstairs:block/citrine_block"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/block/growth_stop.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/growth_stop.json b/src/main/resources/assets/slabsnstairs/models/block/growth_stop.json
new file mode 100644
--- /dev/null	(date 1656871951370)
+++ b/src/main/resources/assets/slabsnstairs/models/block/growth_stop.json	(date 1656871951370)
@@ -0,0 +1,57 @@
+{
+	"credit": "Made with Blockbench",
+	"parent": "minecraft:block/block",
+	"textures": {
+		"all": "slabsnstairs:block/growth_stop",
+		"particle": "slabsnstairs:block/growth_stop"
+	},
+	"elements": [
+		{
+			"from": [7, 7, 7],
+			"to": [9, 9, 9],
+			"faces": {
+				"north": {"uv": [6, 6, 10, 10], "texture": "#all"},
+				"east": {"uv": [6, 6, 10, 10], "texture": "#all"},
+				"south": {"uv": [6, 6, 10, 10], "texture": "#all"},
+				"west": {"uv": [6, 6, 10, 10], "texture": "#all"},
+				"up": {"uv": [6, 6, 10, 10], "texture": "#all"},
+				"down": {"uv": [6, 6, 10, 10], "texture": "#all"}
+			}
+		}
+	],
+	"display": {
+		"thirdperson_righthand": {
+			"rotation": [75, 45, 0],
+			"translation": [0, 2.5, 0],
+			"scale": [0.375, 0.375, 0.375]
+		},
+		"thirdperson_lefthand": {
+			"rotation": [75, 45, 0],
+			"translation": [0, 2.5, 0],
+			"scale": [0.375, 0.375, 0.375]
+		},
+		"firstperson_righthand": {
+			"rotation": [0, 45, 0],
+			"scale": [0.4, 0.4, 0.4]
+		},
+		"firstperson_lefthand": {
+			"rotation": [0, 225, 0],
+			"scale": [0.4, 0.4, 0.4]
+		},
+		"ground": {
+			"translation": [0, 3, 0],
+			"scale": [0.25, 0.25, 0.25]
+		},
+		"gui": {
+			"rotation": [30, 225, 0],
+			"scale": [0.625, 0.625, 0.625]
+		},
+		"head": {
+			"rotation": [0, 180, 0],
+			"translation": [0, 13, 7]
+		},
+		"fixed": {
+			"scale": [0.5, 0.5, 0.5]
+		}
+	}
+}
Index: src/main/resources/assets/slabsnstairs/models/block/citrine_block.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/block/citrine_block.json b/src/main/resources/assets/slabsnstairs/models/block/citrine_block.json
new file mode 100644
--- /dev/null	(date 1656871951634)
+++ b/src/main/resources/assets/slabsnstairs/models/block/citrine_block.json	(date 1656871951634)
@@ -0,0 +1,6 @@
+{
+  "parent": "minecraft:block/cube_all",
+  "textures": {
+    "all": "slabsnstairs:block/citrine_block"
+  }
+}
Index: src/main/resources/assets/slabsnstairs/models/item/cobblestone_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/cobblestone_button.json b/src/main/resources/assets/slabsnstairs/models/item/cobblestone_button.json
new file mode 100644
--- /dev/null	(date 1656871950665)
+++ b/src/main/resources/assets/slabsnstairs/models/item/cobblestone_button.json	(date 1656871950665)
@@ -0,0 +1,3 @@
+{
+  "parent": "slabsnstairs:block/cobblestone_button_inventory"
+}
Index: src/main/resources/assets/slabsnstairs/models/item/growth_stop.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/growth_stop.json b/src/main/resources/assets/slabsnstairs/models/item/growth_stop.json
new file mode 100644
--- /dev/null	(date 1656871950805)
+++ b/src/main/resources/assets/slabsnstairs/models/item/growth_stop.json	(date 1656871950805)
@@ -0,0 +1,6 @@
+{
+	"parent": "minecraft:item/generated",
+	"textures": {
+		"layer0": "slabsnstairs:item/growth_stop"
+	}
+}
Index: src/main/resources/assets/slabsnstairs/models/item/citrine_coin.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/citrine_coin.json b/src/main/resources/assets/slabsnstairs/models/item/citrine_coin.json
new file mode 100644
--- /dev/null	(date 1656871950977)
+++ b/src/main/resources/assets/slabsnstairs/models/item/citrine_coin.json	(date 1656871950977)
@@ -0,0 +1,6 @@
+{
+	"parent": "minecraft:item/generated",
+	"textures": {
+		"layer0": "slabsnstairs:item/citrine_coin"
+	}
+}
Index: src/main/java/net/dancervlt69/slabsnstairs/Init/Blocks/ModBlocks.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/Init/Blocks/ModBlocks.java b/src/main/java/net/dancervlt69/slabsnstairs/Init/Blocks/ModBlocks.java
new file mode 100644
--- /dev/null	(date 1656875571966)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/Init/Blocks/ModBlocks.java	(date 1656875571966)
@@ -0,0 +1,70 @@
+package net.dancervlt69.slabsnstairs.Init.Blocks;
+
+import net.dancervlt69.slabsnstairs.Init.Items.ModItems;
+import net.dancervlt69.slabsnstairs.Init.Tabs.ModTabs;
+import net.dancervlt69.slabsnstairs.SlabsNstairs;
+import net.minecraft.world.item.BlockItem;
+import net.minecraft.world.item.CreativeModeTab;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.*;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.material.Material;
+import net.minecraftforge.eventbus.api.IEventBus;
+import net.minecraftforge.registries.DeferredRegister;
+import net.minecraftforge.registries.ForgeRegistries;
+import net.minecraftforge.registries.RegistryObject;
+
+import java.util.function.Supplier;
+
+public class ModBlocks {
+    public static final DeferredRegister<Block> BLOCKS =
+            DeferredRegister.create(ForgeRegistries.BLOCKS, SlabsNstairs.MODID);
+
+    // Define your different Blocks
+    public static final RegistryObject<Block> GROWTH_STOP = registerBlock("growth_stop",
+            () -> new ChainBlock(BlockBehaviour.Properties.of(Material.DECORATION).sound(SoundType.STONE)
+                    .strength(0.5F).noCollission()), ModTabs.MODTAB_TAB);
+
+    public static final RegistryObject<Block> COBBLESTONE_BUTTON = registerBlock("cobblestone_button",
+            () -> new StoneButtonBlock(BlockBehaviour.Properties.of(Material.STONE).noCollission()
+                    .strength(0.5F)), CreativeModeTab.TAB_REDSTONE);
+
+    public static final RegistryObject<Block> ANDESITE_BUTTON = registerBlock("andesite_button",
+            () -> new StoneButtonBlock(BlockBehaviour.Properties.of(Material.STONE).noCollission()
+                    .strength(0.5F)), CreativeModeTab.TAB_REDSTONE);
+    public static final RegistryObject<Block> DIORITE_BUTTON = registerBlock("diorite_button",
+            () -> new StoneButtonBlock(BlockBehaviour.Properties.of(Material.STONE).noCollission()
+                    .strength(0.5F)), CreativeModeTab.TAB_REDSTONE);
+    public static final RegistryObject<Block> GRANITE_BUTTON = registerBlock("granite_button",
+            () -> new StoneButtonBlock(BlockBehaviour.Properties.of(Material.STONE).noCollission()
+                    .strength(0.5F)), CreativeModeTab.TAB_REDSTONE);
+
+
+    public static final RegistryObject<Block> CITRINE_BLOCK = registerBlock("citrine_block",
+            () -> new Block(BlockBehaviour.Properties.of(Material.METAL).sound(SoundType.METAL)
+                    .strength(7F).requiresCorrectToolForDrops()), ModTabs.MODTAB_TAB);
+    public static final RegistryObject<Block> CITRINE_SLAB = registerBlock("citrine_slab",
+            () -> new SlabBlock(BlockBehaviour.Properties.of(Material.METAL).sound(SoundType.METAL)
+                    .strength(7F)), ModTabs.MODTAB_TAB);
+    public static final RegistryObject<Block> CITRINE_STAIRS = registerBlock("citrine_stairs",
+            () -> new StairBlock(() -> ModBlocks.CITRINE_STAIRS.get().defaultBlockState(),
+                    BlockBehaviour.Properties.of(Material.STONE).sound(SoundType.METAL)
+                            .strength(5F).requiresCorrectToolForDrops()), ModTabs.MODTAB_TAB);
+
+    // registering the Blocks
+    private static <T extends Block> RegistryObject<T> registerBlock(String name, Supplier<T> block,
+                                                                     CreativeModeTab tab) {
+        RegistryObject<T> toReturn = BLOCKS.register(name, block);
+        registerBlockItem(name, toReturn, tab);
+        return toReturn;
+    }
+
+    private static <T extends Block> RegistryObject<Item> registerBlockItem(String name, RegistryObject<T> block,
+        CreativeModeTab tab) {
+        return ModItems.ITEMS.register(name, () -> new BlockItem(block.get(), new Item.Properties().tab(tab)));
+    }
+
+    public static void register(IEventBus eventBus) {
+        BLOCKS.register(eventBus);
+    }
+}
Index: src/main/resources/assets/slabsnstairs/sounds.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/sounds.json b/src/main/resources/assets/slabsnstairs/sounds.json
new file mode 100644
--- /dev/null	(date 1656871953491)
+++ b/src/main/resources/assets/slabsnstairs/sounds.json	(date 1656871953491)
@@ -0,0 +1,1 @@
+{}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_slab.json b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_slab.json
new file mode 100644
--- /dev/null	(date 1656871953572)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_slab.json	(date 1656871953572)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:building_blocks/citrine_slab"
+    ]
+  },
+  "criteria": {
+    "has_citrine_block": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "slabsnstairs:citrine_block"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_citrine_block"
+    ]
+  ]
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_block.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_block.json b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_block.json
new file mode 100644
--- /dev/null	(date 1656871953636)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_block.json	(date 1656871953636)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:building_blocks/citrine_block"
+    ]
+  },
+  "criteria": {
+    "has_citrine": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "slabsnstairs:citrine"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_citrine"
+    ]
+  ]
+}
Index: src/main/resources/assets/slabsnstairs/models/item/granite_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/models/item/granite_button.json b/src/main/resources/assets/slabsnstairs/models/item/granite_button.json
new file mode 100644
--- /dev/null	(date 1656871953244)
+++ b/src/main/resources/assets/slabsnstairs/models/item/granite_button.json	(date 1656871953244)
@@ -0,0 +1,3 @@
+{
+  "parent": "slabsnstairs:block/granite_button_inventory"
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_stairs.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_stairs.json b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_stairs.json
new file mode 100644
--- /dev/null	(date 1656871953329)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/building_blocks/citrine_stairs.json	(date 1656871953329)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:building_blocks/citrine_stairs"
+    ]
+  },
+  "criteria": {
+    "has_citrine_block": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "slabsnstairs:citrine_block"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_citrine_block"
+    ]
+  ]
+}
Index: LICENSE.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
--- /dev/null	(date 1656871953340)
+++ b/LICENSE.txt	(date 1656871953340)
@@ -0,0 +1,674 @@
+                   GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <https://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    <program>  Copyright (C) <year>  <name of author>
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<https://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<https://www.gnu.org/licenses/why-not-lgpl.html>.
Index: src/main/resources/assets/slabsnstairs/lang/en_us.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/assets/slabsnstairs/lang/en_us.json b/src/main/resources/assets/slabsnstairs/lang/en_us.json
new file mode 100644
--- /dev/null	(date 1656871953348)
+++ b/src/main/resources/assets/slabsnstairs/lang/en_us.json	(date 1656871953348)
@@ -0,0 +1,40 @@
+{
+  "block.slabsnstairs.ice_slab":          "Ice Slabs",
+  "block.slabsnstairs.ice_stairs":        "Ice Stairs",
+  "block.slabsnstairs.blue_ice_slab":     "Blue Ice Slabs",
+  "block.slabsnstairs.blue_ice_stairs":   "Blue Ice Stairs",
+  "block.slabsnstairs.packed_ice_slab":   "Packed Ice Slab",
+  "block.slabsnstairs.packed_ice_stairs": "Packed Ice Stairs",
+
+  "block.slabsnstairs.citrine_block":         "Citrine Block",
+  "block.slabsnstairs.citrine_ore":           "Citrine Ore",
+  "block.slabsnstairs.deepslate_citrine_ore": "Deepslate Citrine Ore",
+  "block.slabsnstairs.citrine_slab":          "Citrine Slab",
+  "block.slabsnstairs.citrine_stairs":        "Citrine Stairs",
+
+  "block.slabsnstairs.vertical_ice_slab":     "Vertical Ice Slab",
+
+  "block.slabsnstairs.andesite_button":           "Andesite Button",
+  "block.slabsnstairs.polished_andesite_button":  "Polished Andesite Button",
+  "block.slabsnstairs.diorite_button":            "Diorite Button",
+  "block.slabsnstairs.polished_diorite_button":   "Polished Diorite Button",
+  "block.slabsnstairs.granite_button":            "Granite Button",
+  "block.slabsnstairs.polished_granite_button":   "Polished Granite Button",
+  "block.slabsnstairs.cobblestone_button":        "Cobble Stone Button",
+  "block.slabsnstairs.growth_stop":               "Growth Stop",
+
+  "item.slabsnstairs.citrine":      "Citrine",
+  "item.slabsnstairs.raw_citrine":  "Raw Citrine",
+  "item.slabsnstairs.citrine_coin": "Citrine Coin",
+  "item.slabsnstairs.dowsing_rod":  "Dowsing Rod",
+
+  "item.slabsnstairs.dowsing_rod.found":        "Found ",
+  "item.slabsnstairs.dowsing_rod.located":      "  at ",
+  "item.slabsnstairs.dowsing_rod.no_valuables": "No valuables found.",
+
+  "itemGroup.modtab_tab": "Citrine",
+
+  "tooltip.slabsnstairs.block.citrine_block":         "You will get 9 Citrine Crystals from this Block.",
+  "tooltip.slabsnstairs.dowsing_rod.tooltip.shift":   "With an right click the Dowsing Rod can//n show you the position of some ore.",
+  "tooltip.slabsnstairs.dowsing_rod.tooltip":         "Hold §eShift§r for more Information."
+}
Index: src/main/java/net/dancervlt69/slabsnstairs/Init/Recipes/Custom/CitrineCoins.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/Init/Recipes/Custom/CitrineCoins.java b/src/main/java/net/dancervlt69/slabsnstairs/Init/Recipes/Custom/CitrineCoins.java
new file mode 100644
--- /dev/null	(date 1656871954236)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/Init/Recipes/Custom/CitrineCoins.java	(date 1656871954236)
@@ -0,0 +1,39 @@
+package net.dancervlt69.slabsnstairs.Init.Recipes.Custom;
+
+
+public class CitrineCoins {
+
+}
+
+/*
+public class Blaze implements Listener {
+
+    @EventHandler
+    public void onInventoryClick(InventoryClickEvent e) {
+        if (e.getWhoClicked() instanceof Player) {
+            if (e.getView().getType() == InventoryType.ANVIL) {
+                AnvilInventory anvilInv = (AnvilInventory) e.getInventory();
+                int slot = e.getRawSlot();
+
+                if (slot == 2) {
+                    ItemStack[] itemsInAnvil = anvilInv.getContents();
+                    Material[] swords = {Material.WOOD_SWORD, Material.STONE_SWORD, Material.GOLD_SWORD, Material.IRON_SWORD, Material.DIAMOND_SWORD, Material.BLAZE_POWDER};
+
+                    for (Material m : swords) {
+                        if (itemsInAnvil[0].getType() == m && itemsInAnvil[1].getType() == m) {
+                            ItemStack slot1 = itemsInAnvil[0];
+                            ItemStack slot2 = itemsInAnvil[1];
+
+                            if (slot1.getEnchantmentLevel(Enchantment.FIRE_ASPECT) == 1 && slot2.getEnchantmentLevel(Enchantment.FIRE_ASPECT) == 1) {
+                                ItemStack sword = new ItemStack(m, 1);
+                                sword.addUnsafeEnchantment(Enchantment.FIRE_ASPECT, 2);
+                                e.setCurrentItem(sword);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+*/
Index: src/main/java/net/dancervlt69/slabsnstairs/Init/Items/ModItems.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/Init/Items/ModItems.java b/src/main/java/net/dancervlt69/slabsnstairs/Init/Items/ModItems.java
new file mode 100644
--- /dev/null	(date 1656871954245)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/Init/Items/ModItems.java	(date 1656871954245)
@@ -0,0 +1,31 @@
+package net.dancervlt69.slabsnstairs.Init.Items;
+
+import net.dancervlt69.slabsnstairs.Init.Tabs.ModTabs;
+import net.dancervlt69.slabsnstairs.SlabsNstairs;
+import net.minecraft.world.item.Item;
+import net.minecraftforge.eventbus.api.IEventBus;
+import net.minecraftforge.registries.DeferredRegister;
+import net.minecraftforge.registries.ForgeRegistries;
+import net.minecraftforge.registries.RegistryObject;
+
+public class ModItems {
+
+    public static final DeferredRegister<Item> ITEMS =
+            DeferredRegister.create(ForgeRegistries.ITEMS, SlabsNstairs.MODID);
+
+    //Define your different Items here
+    /* public static final RegistryObject<Item> GROWTH_STOP = ITEMS.register("growth_stop",
+            () -> new Item(new Item.Properties().tab(ModTabs.MODTAB_TAB))); */
+
+    public static final RegistryObject<Item> CITRINE = ITEMS.register("citrine",
+            () -> new Item(new Item.Properties().tab(ModTabs.MODTAB_TAB)));
+
+    public static final RegistryObject<Item> CITRINE_COIN = ITEMS.register("citrine_coin",
+            () -> new Item(new Item.Properties().tab(ModTabs.MODTAB_TAB)));
+
+
+    //Register the defined Item/s
+    public static void register(IEventBus eventBus){
+        ITEMS.register(eventBus);
+    }
+}
Index: src/main/java/net/dancervlt69/slabsnstairs/Init/Sounds/ModSounds.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/Init/Sounds/ModSounds.java b/src/main/java/net/dancervlt69/slabsnstairs/Init/Sounds/ModSounds.java
new file mode 100644
--- /dev/null	(date 1656871953873)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/Init/Sounds/ModSounds.java	(date 1656871953873)
@@ -0,0 +1,18 @@
+package net.dancervlt69.slabsnstairs.Init.Sounds;
+
+import net.dancervlt69.slabsnstairs.SlabsNstairs;
+import net.minecraft.sounds.SoundEvent;
+import net.minecraftforge.eventbus.api.IEventBus;
+import net.minecraftforge.registries.DeferredRegister;
+import net.minecraftforge.registries.ForgeRegistries;
+
+public class ModSounds {
+
+    public static final DeferredRegister<SoundEvent> SOUND_EVENTS =
+            DeferredRegister.create(ForgeRegistries.SOUND_EVENTS, SlabsNstairs.MODID);
+
+
+    public static void  register(IEventBus eventBus) {
+        SOUND_EVENTS.register(eventBus);
+    }
+}
Index: src/main/java/net/dancervlt69/slabsnstairs/Init/Tabs/ModTabs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/Init/Tabs/ModTabs.java b/src/main/java/net/dancervlt69/slabsnstairs/Init/Tabs/ModTabs.java
new file mode 100644
--- /dev/null	(date 1656871954219)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/Init/Tabs/ModTabs.java	(date 1656871954219)
@@ -0,0 +1,15 @@
+package net.dancervlt69.slabsnstairs.Init.Tabs;
+
+import net.dancervlt69.slabsnstairs.Init.Items.ModItems;
+import net.minecraft.world.item.CreativeModeTab;
+import net.minecraft.world.item.ItemStack;
+
+public class ModTabs {
+
+    public static final CreativeModeTab MODTAB_TAB = new CreativeModeTab("modtab_tab") {
+        @Override
+        public ItemStack makeIcon() {
+            return new ItemStack(ModItems.CITRINE.get());
+        }
+    };
+}
Index: src/main/java/net/dancervlt69/slabsnstairs/SlabsNstairs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/net/dancervlt69/slabsnstairs/SlabsNstairs.java b/src/main/java/net/dancervlt69/slabsnstairs/SlabsNstairs.java
new file mode 100644
--- /dev/null	(date 1656871954227)
+++ b/src/main/java/net/dancervlt69/slabsnstairs/SlabsNstairs.java	(date 1656871954227)
@@ -0,0 +1,69 @@
+package net.dancervlt69.slabsnstairs;
+
+import net.dancervlt69.slabsnstairs.Init.Blocks.ModBlocks;
+import net.dancervlt69.slabsnstairs.Init.Items.ModItems;
+import net.dancervlt69.slabsnstairs.Init.Sounds.ModSounds;
+import net.minecraft.client.renderer.ItemBlockRenderTypes;
+import net.minecraft.client.renderer.RenderType;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.eventbus.api.IEventBus;
+import net.minecraftforge.fml.common.Mod;
+import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
+import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
+import net.minecraftforge.network.NetworkEvent;
+import net.minecraftforge.network.NetworkRegistry;
+import net.minecraftforge.network.simple.SimpleChannel;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import java.util.function.BiConsumer;
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+
+@Mod(SlabsNstairs.MODID)
+public class SlabsNstairs {
+    public static final Logger LOGGER = LogManager.getLogger(SlabsNstairs.class);
+    public static final String MODID = "slabsnstairs";
+    private static final String PROTOCOL_VERSION = "1";
+    public static final SimpleChannel PACKET_HANDLER = NetworkRegistry.newSimpleChannel(new ResourceLocation(MODID, MODID),
+            () -> PROTOCOL_VERSION, PROTOCOL_VERSION::equals, PROTOCOL_VERSION::equals);
+    private static int messageID = 0;
+
+    public SlabsNstairs()
+    {
+        IEventBus eventBus = FMLJavaModLoadingContext.get().getModEventBus();
+
+        // Registering Blocks, Items, Sounds, etc.
+        ModItems.register(eventBus);
+        ModBlocks.register(eventBus);
+        ModSounds.register(eventBus);
+
+        // Register the setup method for modLoading
+        eventBus.addListener(this::setup);
+        eventBus.addListener(this::clientSetup);
+
+        // Register ourselves for server and other game events we are interested in
+        MinecraftForge.EVENT_BUS.register(this);
+        // Minecraft.getInstance().player.chat(msg);
+    }
+
+    private void clientSetup(final FMLCommonSetupEvent event) {
+        ItemBlockRenderTypes.setRenderLayer(ModBlocks.GROWTH_STOP.get(), RenderType.cutout());
+/*        ItemBlockRenderTypes.setRenderLayer(ModBlocks.ICE_SLAB.get(), RenderType.translucent());
+        ItemBlockRenderTypes.setRenderLayer(ModBlocks.ICE_STAIRS.get(), RenderType.translucent()); */
+    }
+    private void setup(final FMLCommonSetupEvent event) {
+        // Preinit code
+        LOGGER.info("PreInit has started...");
+        LOGGER.info("DIRT BLOCK >> {}", Blocks.DIRT.getRegistryName());
+    }
+    public static <T> void addNetworkMessage(Class<T> messageType, BiConsumer<T, FriendlyByteBuf> encoder, Function<FriendlyByteBuf, T> decoder,
+                                             BiConsumer<T, Supplier<NetworkEvent.Context>> messageConsumer) {
+        PACKET_HANDLER.registerMessage(messageID, messageType, encoder, decoder, messageConsumer);
+        messageID++;
+    }
+}
Index: src/main/resources/data/slabsnstairs/loot_tables/blocks/cobblestone_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_tables/blocks/cobblestone_button.json b/src/main/resources/data/slabsnstairs/loot_tables/blocks/cobblestone_button.json
new file mode 100644
--- /dev/null	(date 1656871941965)
+++ b/src/main/resources/data/slabsnstairs/loot_tables/blocks/cobblestone_button.json	(date 1656871941965)
@@ -0,0 +1,20 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1.0,
+      "bonus_rolls": 0.0,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "slabsnstairs:cobblestone_button"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
Index: src/main/resources/data/minecraft/tags/blocks/mineable/hoe.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/minecraft/tags/blocks/mineable/hoe.json b/src/main/resources/data/minecraft/tags/blocks/mineable/hoe.json
new file mode 100644
--- /dev/null	(date 1656871942057)
+++ b/src/main/resources/data/minecraft/tags/blocks/mineable/hoe.json	(date 1656871942057)
@@ -0,0 +1,6 @@
+{
+  "replace": false,
+  "values": [
+
+  ]
+}
Index: src/main/resources/data/minecraft/tags/blocks/needs_iron_tool.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/minecraft/tags/blocks/needs_iron_tool.json b/src/main/resources/data/minecraft/tags/blocks/needs_iron_tool.json
new file mode 100644
--- /dev/null	(date 1656871941803)
+++ b/src/main/resources/data/minecraft/tags/blocks/needs_iron_tool.json	(date 1656871941803)
@@ -0,0 +1,7 @@
+{
+  "replace": false,
+  "values": [
+    "slabsnstairs:citrine_block",
+    "slabsnstairs:citrine_slab"
+  ]
+}
Index: src/main/resources/data/minecraft/tags/blocks/needs_diamond_tool.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/minecraft/tags/blocks/needs_diamond_tool.json b/src/main/resources/data/minecraft/tags/blocks/needs_diamond_tool.json
new file mode 100644
--- /dev/null	(date 1656871941884)
+++ b/src/main/resources/data/minecraft/tags/blocks/needs_diamond_tool.json	(date 1656871941884)
@@ -0,0 +1,6 @@
+{
+  "replace": false,
+  "values": [
+
+  ]
+}
Index: src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_slab_sc.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_slab_sc.json b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_slab_sc.json
new file mode 100644
--- /dev/null	(date 1656871942419)
+++ b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_slab_sc.json	(date 1656871942419)
@@ -0,0 +1,8 @@
+{
+  "type": "minecraft:stonecutting",
+  "ingredient": {
+    "item": "slabsnstairs:citrine_block"
+  },
+  "result": "slabsnstairs:citrine_slab",
+  "count": 2
+}
Index: src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_stairs.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_stairs.json b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_stairs.json
new file mode 100644
--- /dev/null	(date 1656871942485)
+++ b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_stairs.json	(date 1656871942485)
@@ -0,0 +1,18 @@
+{
+  "type": "minecraft:crafting_shaped",
+  "replace": "true",
+  "pattern": [
+    "#  ",
+    "## ",
+    "###"
+  ],
+  "key": {
+    "#": {
+      "item": "slabsnstairs:citrine_block"
+    }
+  },
+  "result": {
+    "item": "slabsnstairs:citrine_stairs",
+    "count": 4
+  }
+}
Index: src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_slab.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_slab.json b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_slab.json
new file mode 100644
--- /dev/null	(date 1656871942692)
+++ b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_slab.json	(date 1656871942692)
@@ -0,0 +1,16 @@
+{
+  "type": "minecraft:crafting_shaped",
+  "replace": "true",
+  "pattern": [
+    "###"
+  ],
+  "key": {
+    "#": {
+      "item": "slabsnstairs:citrine_block"
+    }
+  },
+  "result": {
+    "item": "slabsnstairs:citrine_slab",
+    "count": 6
+  }
+}
Index: src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_block_from_citrine_slabs.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_block_from_citrine_slabs.json b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_block_from_citrine_slabs.json
new file mode 100644
--- /dev/null	(date 1656871942957)
+++ b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_block_from_citrine_slabs.json	(date 1656871942957)
@@ -0,0 +1,17 @@
+{
+    "type": "minecraft:crafting_shaped",
+	"group": "slabs2blocks",
+    "pattern": [
+        "__",
+        "__"
+    ],
+    "key": {
+        "_": {
+            "item": "slabsnstairs:citrine_slab"
+        }
+    },
+    "result": {
+        "item": "slabsnstairs:citrine_block",
+        "count": 2
+    }
+}
Index: src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_block.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_block.json b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_block.json
new file mode 100644
--- /dev/null	(date 1656871942161)
+++ b/src/main/resources/data/slabsnstairs/recipes/building_blocks/citrine_block.json	(date 1656871942161)
@@ -0,0 +1,17 @@
+{
+    "type": "minecraft:crafting_shaped",
+	"group": "slabs2blocks",
+    "pattern": [
+        "***",
+        "***",
+        "***"
+    ],
+    "key": {
+        "*": {
+            "item": "slabsnstairs:citrine"
+        }
+    },
+    "result": {
+        "item": "slabsnstairs:citrine_block"
+    }
+}
Index: src/main/resources/data/slabsnstairs/loot_tables/blocks/growth_stop.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_tables/blocks/growth_stop.json b/src/main/resources/data/slabsnstairs/loot_tables/blocks/growth_stop.json
new file mode 100644
--- /dev/null	(date 1656871942242)
+++ b/src/main/resources/data/slabsnstairs/loot_tables/blocks/growth_stop.json	(date 1656871942242)
@@ -0,0 +1,20 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1.0,
+      "bonus_rolls": 0.0,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "slabsnstairs:growth_stop"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
Index: src/main/resources/data/slabsnstairs/loot_tables/blocks/citrine_block.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/loot_tables/blocks/citrine_block.json b/src/main/resources/data/slabsnstairs/loot_tables/blocks/citrine_block.json
new file mode 100644
--- /dev/null	(date 1656871942323)
+++ b/src/main/resources/data/slabsnstairs/loot_tables/blocks/citrine_block.json	(date 1656871942323)
@@ -0,0 +1,20 @@
+{
+  "type": "minecraft:block",
+  "pools": [
+    {
+      "rolls": 1.0,
+      "bonus_rolls": 0.0,
+      "entries": [
+        {
+          "type": "minecraft:item",
+          "name": "slabsnstairs:citrine_block"
+        }
+      ],
+      "conditions": [
+        {
+          "condition": "minecraft:survives_explosion"
+        }
+      ]
+    }
+  ]
+}
Index: src/main/resources/data/slabsnstairs/advancements/recipes/redstone/cobblestone_button.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/cobblestone_button.json b/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/cobblestone_button.json
new file mode 100644
--- /dev/null	(date 1656871941680)
+++ b/src/main/resources/data/slabsnstairs/advancements/recipes/redstone/cobblestone_button.json	(date 1656871941680)
@@ -0,0 +1,27 @@
+{
+  "parent": "minecraft:recipes/root",
+  "rewards": {
+    "recipes": [
+      "slabsnstairs:redstone/cobblestone_button"
+    ]
+  },
+  "criteria": {
+    "has_cobblestone": {
+      "trigger": "minecraft:inventory_changed",
+      "conditions": {
+        "items": [
+          {
+            "items": [
+              "minecraft:cobblestone"
+            ]
+          }
+        ]
+      }
+    }
+  },
+  "requirements": [
+    [
+      "has_cobblestone"
+    ]
+  ]
+}
diff --git a/src/main/resources/assets/slabsnstairs/textures/block/citrine_slab.png b/src/main/resources/assets/slabsnstairs/textures/block/citrine_slab.png
new file mode 100644
index 0000000000000000000000000000000000000000..fc32167ea6cf620ae71041e0b6592c7fa89fdc5d
GIT binary patch
literal 328
zc%17D@N?(olHy`uVBq!ia0vp^0wB!63?wyl`GbKJV{wqX6T`Z5GB1G~mUKs7M+SzC
z{oH>NS%G|y0G|-o>D8udr&u1|Vt0Ojz~!UamyTrZSZLjoZ@j3(V%Y@ecQ0q(yODS6
zQt-Lsj;|g!JiC{+W4X<d&Hg8LWbR#)zH^z++Syi%I?REF-TM9Q8jzAG3Gxg6j~y_a
z71nzNRKr=|5n0T@z;^(I8MCf+asmZYJzX3_G=h(w@#bqV;9v<5a9MLSEcf-_e62bm
zVf_aJX8BAT>OYAyD3!VRTroD}=9z1CS5h^`VCDBWxfKp3v(9Rsc*ERm`D13J&|zVh
x$<O9YPj#JqQgNTZ;9`cHrQ5>J-}Tb0VECcPUwJM-{~ORk22WQ%mvv4FO#pNdi6Q_1

diff --git a/src/main/resources/assets/slabsnstairs/textures/item/citrine_old.png b/src/main/resources/assets/slabsnstairs/textures/item/citrine_old.png
new file mode 100644
index 0000000000000000000000000000000000000000..ce036e8d9ea73df6d0b31b156ab95bb793d2ce30
GIT binary patch
literal 611
zc$@)a0-XJcP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00001b5ch_0Itp)
z=>Px#1ZP1_K>z@;j|==^1poj532;bRa{vGi!vFvd!vV){sAK>D0r*KoK~y+TrBY8%
z6G0q(JKL55rIBqd$WoL5@;@;gJdhBG2NEELgiqkXD~Sny3_W?}pcju`2$*;<dLc0}
zCK7>a6#^6uZMQ%RrAyfz<~QtaT=dqLY~Jj9Z{F-?eyA0S!#)@rFM0m^63T_&^1VT8
zL%jDPVgrx<$@_%mr@GodIek&s{sP-NchoB|H3Y451e@<x0yEF{El2hj?0#I}+0+Nv
z_BmSm2hnt^hh($#CtY{2xemrcNc2shWBj?dPj#41zoYQ{6WcP8yg!CWYc~`%U>W9c
zN{h3)2CX@KoY@k;mBDNud-Zy?bVU1@+$}IPJ-1DteWP7Ry{0=V*jd>q3;s$Pd6c2-
zmHk)2Nj5FHN$-~IKuN~4ZHJYvR<S-19w*Vw61;*+u^>4dO%T~i<0x@aJjv$pufQq4
zR}o&7L^n(D3a){1+kzDwii$Oz+QJdA1yi99UO_mjNj6J4$vFEYj*&K9StO!-)`b@%
z!Oar9f=EJM8H)QqB@1Y3b&Yt<4h_>#1cfKB&&?9Nf^REtI%!yr_A)Sw&Q}Pi^}Qo3
z)WOW-oJAgGDC^k%LE3pg&vWTja9$MyGvE#q#2_J?+JK@2akFO>w;#Ol_W25G9%UE#
x^+j&{c#BgbBi|ci?TFo-LVWP?fAci}xCE%1y{e4uoiYFb002ovPDHLkV1n2#2Xg=b

diff --git a/src/main/resources/assets/slabsnstairs/textures/item/citrine_coin_32.png b/src/main/resources/assets/slabsnstairs/textures/item/citrine_coin_32.png
new file mode 100644
index 0000000000000000000000000000000000000000..2fc1df8b2fd7ab3ad5c4d07cde4e8fdb82d9d268
GIT binary patch
literal 1971
zc$@*V2Tb^hP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F800001b5ch_0Itp)
z=>Px#1ZP1_K>z@;j|==^1poj532;bRa{vGi!vFvd!vV){sAK>D2S`aoK~z{r?N(cC
z99J3sc6MfGclK(py|!yRPEsdL97C;yMioiRr9`SgrD+>cqCU{R0m=iQ0uP`T6{PZj
zfL2II2vv~~g+^6*prTD_r4&`6ib9$?ZW70C+{EkauD$EM&VBgK?%0X5Zqhe+=qDY`
zoHJ+6|NZxaPw~G-z<=Hn|9pP<PD?KysF$+-N)rJ|Mj|t8^Yyu}969SXS3fy!N#Jik
z3*Y6r_HH>8yNBB!v#ly*B?>7Rf_QhWI@EZNsh6_f<94@e+gBlnv}1Q4e!0**;pX^Q
z0w?~k|L$tx@>adFa7b2T4@r_dVb%+$WHo_EycbG1iF#><gBJ0e=1&3XP_pZ@s!_}R
z*wR;CIQUd0-~90L*pL8)@1eP$HLAG-W_|ghmKvDoZL1q$cjlz{?zoUV50WIokpfsV
z``C2&u27`?K?>Jg$M_K~cl428Am@MH5JCUB4v!s3K1a<Tpk@;T8TUWk(S?(;SDvmL
z2p3k+UML|`sv=#kqK(^KRe=$pDw(7`D|J6usVq(ANZ?U^D?NHICXW3JwZ_34poPFI
zPsxKuW#JJis091d^^>ts{fyAKSVD5_5_W%Z3H!@63|J0&`RuhFc*z)Y!5|ubh!~?Y
zopIw*z8YPE=YAWWS0;&ZlBhQX+<+DW-?%sMA_9ToO&$7M@v!~AVM4w-i{7a$Mk+OI
zUoK)(T}PVcZ==?V>p)J#a5bdB<b2H?nS{BRD~Fam&;1UkwZmTykG*ul)|+3iLGqss
zy!y-TG|e8`oN?YrM7&Y4R;nN|c?El?rm@$s(5Gn#7zVt09fd>`7b0QI>jpGorN$xG
zVYpu(W40XUcvcFkM^66vV9futhIK!Y?ccfaOa2rt53SbGM!}nO9mz@sax#vr7Dl#E
zpn+|Cw6zzfI@>U>$Pl%l1%03SrXET5SsXuiU0bB;I;<mLRu>_waRlXXWA1tgRCM%e
zQK+#fJQ8qe<e6<-@HV60_-GnCxW`%b|3*j^kDg(={;8b1h=uW2{ncw|F<Y299t=er
z+Slrca`e#OS}FyLey+_gppQN;_GB<NpTnNhqZnaI-n5_%_30Ps+TZ)rb!Z`=MmuN$
zwee2B%8c?D1<3TZp6SF@%Z7I8GIkB$fph70rv5BOIPZ0w*0WYYYYF$5YP9QzZ~kuN
zC(YF+T7I&PGF-=MgtO30<hPGtM?03&DNHRcVd%;X`Uh^qIm<%y{3P};JECI$>hS+r
zLx825#Vt|JT}b##4YUwo<%4S*jdva-s+~w3*LD$8!-x;`V=Anoke$O23FUjcai+L}
z0oI6J%$P7OBr|A3;@LRFhj6W=M5tWz>{YBI5Req;tnap2MNooEUl$nNCEtWDi_s=o
zfl8t0Sp|D8OkyO{ff+4={QM%e(;eL_6{PY-^c2fzzupqzST~zgOBSvtz(zt-Db&0f
z)FQfB8Q!NG1Z|0aPE>W=-q`^olg4>!+#>>&gf5tL#rS3HWzE<#J&%3!OW4UZrEw4;
zG#7b$Bi0d6qn*#VjyXD4?cSn0+U<gVJc?ze;0LrwnJE{l=@_ikv7@UKizMbu&tX?1
zKszwOn$gY7xPz6ln=VLj-<rQg=M?dEBi0ev|M=^#%c1z3=U87bEh{ZbYd8d>Cylde
z2wBc8rl-cHv^5aK0EHGPD8+!>9gZN*cu6uIZmU+IlDt9EYbsleE&3QCt<zs=q9q8~
z=U=eR^0_Muh}TSMGu>dPlbCOdV~kyImLzPOLTQO1Sw>$Z0+p`VM(uaDr=gLAC|DM~
zxEzf%yPzfa-KoYh`{;w?JpZ+ZARjFR?*GB$v1t3?I5&Rn%5vLQ(~WFq)EnI$7-vvk
zAc?HV4AzH~6F@(EL%S$ci#fEL2CCeXwM-b5D#J;FCC;3!b~&D7f6lRL@9_K+4M9FO
zybm0C;=VX@c97|~zhuVqQPn~`V$TI-=+wH#;V}Od5d*Z4B}~m;A<UiI+>3YVu6$bp
zOTtCE8`-h2kQ=5|KMY9HUtfCL{je#ei46(-@#V4i9)F-;cdYuL=a~D7_3)CW=x#jX
z&Bin=GBxw`@d~Xm$Hp`p)i6!B6v}0^ZRy9^ks+M#>p|Xdwe8b|)NV-%?qz@Z&B3Ru
zFZv?Z&{DCk$MN6pc*3>yC&_+@wc+?cr#+`AN+}emUlr|FT*pkCVZ%TbMQ9<9_U&6R
zBmS-Gfx&FK>+`ItBXs9!Ue%ty@4Kh}(Kz@z+?0U8yMH<Kt#W?+FiU7Z3&{}2zk9Uo
zsEBA;;pHHx1lYnok>|7+OJ?)VF_jD5!@RF)$xTa2IQ45@+23e<xB<5$u!`4ywfQ02
ztUSpJXB(T<PWE<068%uM4k(cnc!7mpo`q4%v+<elky)LM<ogdlW1sSm*btwXz$)H3
zdjA(qz4&}_?u-!RuU><=wg&>z!(abtanfJ<6#vfv{tNJ5O9hPQElU6Z002ovPDHLk
FV1hS<&Qt&Z

diff --git a/src/main/resources/assets/slabsnstairs/textures/block/citrine_slab_top.png b/src/main/resources/assets/slabsnstairs/textures/block/citrine_slab_top.png
new file mode 100644
index 0000000000000000000000000000000000000000..469e28ddf32ffa1d0755dc43198b01448ad61ffa
GIT binary patch
literal 329
zc%17D@N?(olHy`uVBq!ia0vp^0wB!63?wyl`GbKJV{wqX6T`Z5GB1G~mUKs7M+SzC
z{oH>NS%G|y0G|-owNos2F7w&DCVlN}t3@5=)2mH)EVRCLDR@zbMNhu*y&HMwjys;%
zk$GgZ|BmH0&+etYdfae$i`~1Ivo9abKEFR;*#zfHN3wv1O%1rH1f(QNg8YL2V+Rap
zh4o$m)o>PgL>4nJ@ErhQ#;j|doIt@ePZ!4!jo_naqPbcPcvvp1>^Hfdk?p(w?tj0z
zO$s|0(@&h2<PdO@IF>2(yEU=R#pdFVW}T#n?Yc{sM7C}?tTNlNyDN(Q+lk$gDk6st
z?y6q9?lkZJ->UP=9=uTh9>tyMR{c~s<1LfrIsQXy?%z)a+Q{JP>gTe~DWM4fM(mEu

diff --git a/src/main/resources/assets/slabsnstairs/textures/block/citrine_block.png b/src/main/resources/assets/slabsnstairs/textures/block/citrine_block.png
new file mode 100644
index 0000000000000000000000000000000000000000..73c2ced035130cbfd2fd586f135e75045f3da4f2
GIT binary patch
literal 239
zc%17D@N?(olHy`uVBq!ia0vp^0wB!73?$#)eFPF<EDmyaVpw-h<|UBBlJ4m1$iT3%
zpZiZDE08Y~;1lAysKcTs-+0GD>u2}U-o2cC?zrQ=j?!B|S<V8F$YKTtzJnmlxMO1W
zTcBW?r;B5V#AVqoYd$7J9#(l)+dBt-T-G;wSw8iGy3@Y@p&hnYGfZ~acC#PZFY{-&
zg2p|A%!78~XN+X@SFF6PGx5L@)}7u0xq%n`Lju2AWZ17de17JkGbPWAce$V9>#6zm
e;odDKai98<N|9gEwKgC}GkCiCxvX<aXaWGfw^#T8

diff --git a/src/main/resources/assets/slabsnstairs/textures/block/growth_stop.png b/src/main/resources/assets/slabsnstairs/textures/block/growth_stop.png
new file mode 100644
index 0000000000000000000000000000000000000000..6c1e5fa129e73afeeb32d2adeb5e2a13d532ac16
GIT binary patch
literal 143
zc%17D@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`jKx9jP7LeL$-D$|SkfJR9T^xl
z_H+M9WCij$3p^r=85sBugD~Uq{1qucK^0FI#}EtuWC_;8a(~#B=Kojd^7-(eE#UK%
j|4*b1xZ2nf5*QeIEI2m?3MfAXs%P+Y^>bP0l+XkKSRW?0

diff --git a/src/main/resources/assets/slabsnstairs/textures/block/citrine_ore.png b/src/main/resources/assets/slabsnstairs/textures/block/citrine_ore.png
new file mode 100644
index 0000000000000000000000000000000000000000..761c1d743ffc59b289bbeb7da862f8685c71b1e5
GIT binary patch
literal 297
zc%17D@N?(olHy`uVBq!ia0vp^0wB!73?$#)eFPF<EDmyaVpw-h<|UBBlJ4m1$iT3%
zpZiZDE0C`e;1lB7-``(fUtdyEl97>-85{KH@14u1G)tqoBLl5oJ_wkYr?z{c+ROH<
z`at!Z1s;*b3=Dh+L6~vJ#O${~!9GtH#}J9jqGuQK9WoGUeR!F*dG~T1?}FEFSvJi)
z)K|jkZ}8=c&dlT$s(Y9k7dSkgU?Y3<-_ObX4W)6O23$UCbU*n;mi{-|aBzaAjQC~+
zWtVCFbHA(J`DS%iFF)XI{`>B2wzvLqry4G@Xi{Tqevq<t-*v7@&q^vd*SJ;BvooEP
nXnuZ;&$omo!6ock8~!kcOcGaL7+?Mh=rRURS3j3^P6<r_4F_`(

diff --git a/src/main/resources/assets/slabsnstairs/textures/item/citrine.png b/src/main/resources/assets/slabsnstairs/textures/item/citrine.png
new file mode 100644
index 0000000000000000000000000000000000000000..270239ecad9390fd7e96854743e2ad70fd7c837f
GIT binary patch
literal 688
zc$@*S0#E&kP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00001b5ch_0Itp)
z=>Px#1ZP1_K>z@;j|==^1poj532;bRa{vGi!T<mc!T}X1N`L?W0!2wgK~y+Tb&^eJ
z(@-41|L?tgENPR}HeKt|v7s{N$3YQ9FM4yL2wwcakDEu)iATlTL_B%((wko}1YwAR
zcv6so9(IsAWTNZb>{>gQHffWZ<e8R7X=wMmJo4V}{qhnXY{mDvQ~H<u-Vye=C76wU
zV9$Mk34T$?PfoL`feZ}%Ej*e=V)A_8{X0S_omqT(=rUXCV_=}RGN1FknjFvO01KQf
zDn`Ea;rf2I909ShOYzm|gKoY0nUgut#wTfjh*K?ml6Wx%6lv<tGqZK3cIZ0+1#;7C
zZGtqM10t!^!$w)kj(Lu`8otfG$Fweyz`I*~)+#Su;^P_!@dO}(k?qN4MbG@<WeJ?>
z^0oQ9lFsxFk-+Yg7Z<>9fRY;nAr=P|qAQgoh&qzf+rewqVf5I!mrU;v3D~8Aj714V
zZ5RT6Jp4nrNdYATkes2E;UXM<M5!P#y+b6>s&9sSI3T<Th||Hx1|iss2Sg)8&NL`R
zwC(f~2?$C8Xy8HMxq#e7D?n*JoW>$rOZ$!AF@z{;JH12#vCJOuTMoFjDg?eA<Nbwj
zOKgea1m{$K2sH3P37uXdfv<0#O<*K}wfYnMrit38LEPwsYnosdi<BEm!t(ps6HM>W
zcac_JpM7XmzTF^v0D_hV>ighqtOFNbBssO?j&c0)3{yKqPSD0A?(J>6rk-$84(zpG
z(5#d}H4cMh9Jn&Fv3{RvUHSt1rsixble|iiqS{DMElSjeEUO<&N1vk$Z+)gQ0R96s
W_seWZo!Zv`0000<MNUMnLSTXjUpP(x

diff --git a/src/main/resources/assets/slabsnstairs/textures/item/growth_stop.png b/src/main/resources/assets/slabsnstairs/textures/item/growth_stop.png
new file mode 100644
index 0000000000000000000000000000000000000000..6c1e5fa129e73afeeb32d2adeb5e2a13d532ac16
GIT binary patch
literal 143
zc%17D@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`jKx9jP7LeL$-D$|SkfJR9T^xl
z_H+M9WCij$3p^r=85sBugD~Uq{1qucK^0FI#}EtuWC_;8a(~#B=Kojd^7-(eE#UK%
j|4*b1xZ2nf5*QeIEI2m?3MfAXs%P+Y^>bP0l+XkKSRW?0

diff --git a/src/main/resources/assets/slabsnstairs/textures/item/citrine_coin.png b/src/main/resources/assets/slabsnstairs/textures/item/citrine_coin.png
new file mode 100644
index 0000000000000000000000000000000000000000..798c2540ecc437c54548f3a56afd498f0fc58656
GIT binary patch
literal 780
zc$@(Y1M~ceP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00001b5ch_0Itp)
z=>Px#1ZP1_K>z@;j|==^1poj532;bRa{vGi!vFvd!vV){sAK>D0-;GnK~y+Tt&-1A
z(_k3KziYd#?K<fgV{E`S1P&NT4AGhB2@^@iNe?Fe1)7+6@E~5~;7L&vJ(#E`Z(fXE
zL`@7a{z@Q{3?+;h5MdBD*~Z+DZnRr}*ms-6MQ{2^+V_2)KJTY}pT784ERC^=soTMU
zY9{U?bGF5AM8*>{wFiHpN$~2<K);k<yFgR6u*Jggl$AquH>+!!JSTP>To;-78;8!J
z+9<EFCwP5#_(-{!d@9(a_nsDYxm?`URUKB*iCjscxU>>DQ_62V3U%p|zf1N6PbTPx
zem7&aQ_528E5e&w2z%Qh2Yi_B_Tvj>fw7Xbh0C(K)JE&qMy^67>nL)2cHJ9xaz@A{
zDACw5!mDwN8US4?A!WCrKxzp6zRE{I44kgGhb9`Sx<Dyz57`}FQPaR^6#7Z7Rm5yI
z3*P+15_vnx5xnfiV=2A3zY*321e?PHRfW~OT>cJhrP2rm{8;!fhvSL@MmOr)6*yg@
zXs%~!vU7yQbpcIbH@^vs1sa)B3`A41p3TE&Wl)JOVz4NoMOI)Z<u<;JQKT(~%xeO7
zM>sB5s+!ftP-fRZt5rDd9DIfWT5uq{nZVF|45t!l^pbjAtB|2aO)zqPc3RbKnOw=}
z4s{~RvREz47!+M_Z)b3r7vN2%5j1;I(J5Zgs%4EAd^>vrg6KVPbEoVX(<o<qUl(3F
z9az?ZkVAmGPyn}&$AY1um@3$VFtnA(<z$qsYdVQ9ZuOqktI`!Wn|;o+YI^5~A?h0F
zZ*h2r2k}W~96hO`bIfdFWNdtGfvjl~5Z>NDI+{x@Ua~TJD{E&AhZurf&X~VCQIurr
zJLd{Mh+JHK(<uK_@Qdkt$4=yuGkws^jhHa37&|$UdshqoAHYxI<pW9RPI@f>0000<
KMNUMnLSTZ#&{{zN

diff --git a/src/main/resources/assets/slabsnstairs/textures/item/dowsing_rod.png b/src/main/resources/assets/slabsnstairs/textures/item/dowsing_rod.png
new file mode 100644
index 0000000000000000000000000000000000000000..6e5b1da6e449988f3e3e375d437d2495032456b7
GIT binary patch
literal 192
zc%17D@N?(olHy`uVBq!ia0vp^0wB!63?wyl`GbKJV{wqX6T`Z5GB1G~mUKs7M+SzC
z{oH>NS%G}c0G|-oLI;+~ak4-j`)Q}OK#I8}$S?T+e}?O)cpX7%3Opi<85sBugD~Uq
z{1qucK|@a$#}JL+<OC;X14cFrW+y`<0|TdsFCqyk2`owm!n+w}FpD14Vn}t;Si|Je
c(8<a0SeJ3}W|2u-ftndSUHx3vIVCg!0CF)dUjP6A

diff --git a/src/main/resources/assets/slabsnstairs/textures/block/deepslate_citrine_ore.png b/src/main/resources/assets/slabsnstairs/textures/block/deepslate_citrine_ore.png
new file mode 100644
index 0000000000000000000000000000000000000000..58a59f18548b8610cc7e579952fda27355ee0d31
GIT binary patch
literal 300
zc%17D@N?(olHy`uVBq!ia0vp^0wB!73?$#)eFPF<EDmyaVpw-h<|UBBlJ4m1$iT3%
zpZiZDE0C`e;1l9nSy^f8WS^3fqHks#7#Mizpw{2NcS^!|A_J{=&s2YTGjKwNx_7{3
z1)zG)0*}aI1_r)^Ak4U9V)k30;6zUs#}J9jyk`#bHW`SpJ=o8s*wVc=zu`JNcZ8LL
zrmu~(u-JoVR}*9y(?7g8T3~FLX#1D#2ZQpg?P?51ngjPXzA)HnP;rELWu<xLlf}B?
z+Z9Egui3S?LqLW5^=y-<z(0T9neKXQdhU|@gN;AjvKZHkUvE9QaOJxtKmRZJwD|T4
rj*G`@dbYMnh%8SLzG0w#`y#*pdZ}4Uw+H3`9mnA5>gTe~DWM4f!Sr&?

