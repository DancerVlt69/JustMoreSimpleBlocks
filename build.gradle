buildscript {
        dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply from: '/.env/mcAccount.gradle'
apply from: '/.env/updVerNum.gradle'
// apply plugin: 'eclipse'
// apply plugin: 'maven-publish'

modVersion = System.getProperty('modVer')

version = "${mcVersion}-${modVersion}"  // .b${buildNum}"
group = "net.${modOwner}.${modId}"

java {
    archivesBaseName = "${modFileName}"
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

// Include resources generated by data generators.
// sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // for JEI via the 'mezz maven'
    maven {
        name = "Progwm16 maven"
        url = "https://dvs1.progwml6.com//files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    // to use maven from CurseForge via Curse Maven
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

//configurations { embedNoCompile }
//repositories {
 //   maven {
  //      name = "StopModReposts"
   //     url = "https://mvn.stopmodreposts.org/"
 //   }
//}

minecraft {
    // mappings channel: 'official', version: "${mcMappingVersion}" //'snapshot'
    mappings channel: 'parchment', version: "${parchmentDate}-${mcMappingVersion}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            args '--uuid', System.getProperty("uuID")
            args '--username' , System.getProperty("userName")
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                slabsnstairs {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                slabsnstairs {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'slabsnstairs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                slabsnstairs {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcMappingVersion}-${forgeVersion}" //1.18.1-39.1.2'

    // CurseMaven example
    // runtimeOnly fg.deobf("curse.maven:modsign-${modSignVersionCF}")
    //                                      ^           ^- a name of a variable for the gradle.properties file
    //                                      ^- a (short) name of the Mod you will implement/use

    // for use the API of a mod (if exist) see the examples in the JEI-section in the next lines

    // JEI - Just Enough Items at compiling
    // compileOnly fg.deobf("mezz.jei:jei-${mcMappingVersion}:${jeiVersion}:api")
    // JEI - Just Enough Items at runtime
    // runtimeOnly fg.deobf("mezz.jei:jei-${mcMappingVersion}:${jeiVersion}")
    // runtimeOnly fg.deobf("curse.maven:jei-238222:3874762")
    // JEI - Just Enough Items as implementation
    // implementation fg.deobf("curse.maven:jei-238222:3838014")
    runtimeOnly fg.deobf("curse.maven:jei-${jeiVersionCF}")

    // Catalogue
    runtimeOnly fg.deobf("curse.maven:catal-${catalVersionCF}")

    // Configured
    runtimeOnly fg.deobf("curse.maven:config-${confVersionCF}")

    // Jade (HWYLA)
    runtimeOnly fg.deobf("curse.maven:jade-${jadeVersionCF}")

    // JMSR - Just More Simple Recipes
    runtimeOnly fg.deobf("curse.maven:jmsr-${jmsrVersionCF}")

    // Grass Slabs, Carpets & Stairs Mod
    runtimeOnly fg.deobf("curse.maven:gscs-${gscsVersionCF}")

    // Cooking 4 Blockheads
    // runtimeOnly fg.deobf("curse.maven:c4b-${c4blockhVersionCF}")
    // runtimeOnly fg.deobf("curse.maven:balm-${balmVersionCF}")

    // Croptopia
    // runtimeOnly fg.deobf("curse.maven:cropt-${croptVersionCF}")

    // Xaero's World & Mini Map
    runtimeOnly fg.deobf("curse.maven:xmm-${xMmapVersionCF}") // Mini-Map
    runtimeOnly fg.deobf("curse.maven:xwm-${xWmapVersionCF}") // World-Mao

    // Simple Voice Chat
    runtimeOnly fg.deobf("curse.maven:voice-${voiceChatCF}")

    // WorldEdit
    // runtimeOnly fg.deobf("curse.maven:wEdit-${worldEditCF}")

    // Stop Mod Reports
    // embedNoCompile "org.stopmodreposts:stopmodreposts:${minecraftVersion}-${stopmodrepostsVersion}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modName,
                "Specification-Vendor"    : project.modOwner,
                "Specification-Version"   : project.modVersion,
                "Implementation-Title"    : project.modName,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : project.modOwner,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


//task
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// task releaseJars(type: Copy) {
//    from incrementBuildNumber
//    from jar
// }
