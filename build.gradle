//buildscript {
//    repositories {
//
//    }
//    dependencies {
//        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
//        classpath 'org.parchmentmc:librarian:1.+'
//    }
//}

plugins {
    // Other plugins like maven-publish, idea, eclipse, etc. go here
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

// apply plugin: 'eclipse'
// apply plugin: 'maven-publish'
apply from: '/.env/mcAccount.gradle'
apply from: '/.env/updVerNum.gradle'
modVersion = System.getProperty("modVer")

version = "${mcVersion}-${modVersion}"
group = "net.${modOwner}.${modId}"

java {
    archivesBaseName = "${modFileName}"
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

repositories {
    maven {
        name = "Progwm16 maven"
        url = "https://dvs1.progwml6.com//files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}
//repositories {
//   maven {
//      name = "StopModReposts"
//     url = "https://mvn.stopmodreposts.org/"
//   }
//}

//configurations { embedNoCompile }

minecraft {
    // mappings channel: 'official', version: "${mcMappingVersion}" //'snapshot'

    if (parchmentVersion == parchmentMCVersion) {
        mappings channel: 'parchment', version: "${parchmentDate}-${parchmentMCVersion}"
    } else {
        mappings channel: 'parchment', version: "${parchmentVersion}-${parchmentDate}-${parchmentMCVersion}"
    }

    runs {
        client {
            args '--uuid', System.getProperty("uuID")
            args '--user', System.getProperty("userName")

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                slabsnstairs {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                slabsnstairs {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'slabsnstairs'

            mods {
                slabsnstairs {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'slabsnstairs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                slabsnstairs {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcMappingVersion}-${forgeVersion}" //1.19-41.1.0'

    // minecraft "net.minecraftforge:forge:1.19.1-43.1.34"

    // JEI at compiling
    // compileOnly fg.deobf("mezz.jei:jei-${minecraftVersion}:${jeiVersion}:api")
    // JEI at runTime
    // runtimeOnly fg.deobf("mezz.jei:jei-${mcMappingVersion}-forge:${jeiVersion}")
    // implementation fg.deobf("curse.maven:jei-238222:3838014")
    runtimeOnly fg.deobf("curse.maven:jei-${jeiVersionCF}")

    // Catalogue
    runtimeOnly fg.deobf("curse.maven:catal-${catalVersionCF}")

    // Configured
    runtimeOnly fg.deobf("curse.maven:conf-${confVersionCF}")

    // Jade (Hwyla/Waila Fork)
    runtimeOnly fg.deobf("curse.maven:jade-${jadeVersionCF}")

    // Inventory Hud
    runtimeOnly fg.deobf("curse.maven:invhud-${invHudVersionCF}")

    // JMSR
    runtimeOnly fg.deobf("curse.maven:jmsr-${jmsrVersionCF}")

    // Grass Slabs, Carpets & Stairs
    // runtimeOnly fg.deobf("curse.maven:gscs-${gscsVersionCF}")

    // Cooking 4 Blockheads & Balm
    // runtimeOnly fg.deobf("curse.maven:c4b-${c4blockhVersionCF}")
    // runtimeOnly fg.deobf("curse.maven:balm-${balmVersionCF}")

    // Tips & BookShelf
    // runtimeOnly fg.deobf("curse.maven:tips-${tipsVersionCF}")
    // runtimeOnly fg.deobf("curse.maven:bookshelf-${bshelfVersionCF}")

    // Croptopia
    //runtimeOnly fg.deobf("curse.maven:cropt-${croptVersionCF}")

    // Simple Voice Chat
    // runtimeOnly fg.deobf("curse.maven:voicechat-${voiceCVersionCF}")

    // Xaero's World- and Mini Maps
    runtimeOnly fg.deobf("curse.maven:xWmap-${xWmapVersionCF}")
    runtimeOnly fg.deobf("curse.maven:xMmap-${xMmapVersionCF}")

    // Stop Mod Reports
    // embedNoCompile "org.stopmodreposts:stopmodreposts:${minecraftVersion}-${stopmodreposts_version}"

}

//// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modName,
                "Specification-Vendor"    : project.modOwner,
                "Specification-Version"   : System.getProperty("modVer"),
                "Implementation-Title"    : project.modName,
                "Implementation-Version"  : System.getProperty("modVer"),
                "Implementation-Vendor"   : project.modOwner,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar')

//task
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

